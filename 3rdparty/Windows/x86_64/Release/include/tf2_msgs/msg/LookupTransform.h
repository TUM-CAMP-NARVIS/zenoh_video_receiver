// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LookupTransform.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_TF2_MSGS_ACTION_LOOKUPTRANSFORM_H_
#define _FAST_DDS_GENERATED_TF2_MSGS_ACTION_LOOKUPTRANSFORM_H_

#include "builtin_interfaces/msg/Duration_.h"
#include "tf2_msgs/msg/TF2Error.h"
#include "builtin_interfaces/msg/Time_.h"
#include "geometry_msgs/msg/TransformStamped.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LookupTransform_SOURCE)
#define LookupTransform_DllAPI __declspec( dllexport )
#else
#define LookupTransform_DllAPI __declspec( dllimport )
#endif // LookupTransform_SOURCE
#else
#define LookupTransform_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LookupTransform_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace tf2_msgs {
    namespace action {
        /*!
         * @brief This class represents the structure LookupTransform_Goal defined by the user in the IDL file.
         * @ingroup LOOKUPTRANSFORM
         */
        class LookupTransform_Goal
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport LookupTransform_Goal();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~LookupTransform_Goal();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Goal that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Goal(
                    const LookupTransform_Goal& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Goal that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Goal(
                    LookupTransform_Goal&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Goal that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Goal& operator =(
                    const LookupTransform_Goal& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Goal that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Goal& operator =(
                    LookupTransform_Goal&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x tf2_msgs::action::LookupTransform_Goal object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const LookupTransform_Goal& x) const;

            /*!
             * @brief Comparison operator.
             * @param x tf2_msgs::action::LookupTransform_Goal object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const LookupTransform_Goal& x) const;

            /*!
             * @brief This function copies the value in member target_frame
             * @param _target_frame New value to be copied in member target_frame
             */
            eProsima_user_DllExport void target_frame(
                    const std::string& _target_frame);

            /*!
             * @brief This function moves the value in member target_frame
             * @param _target_frame New value to be moved in member target_frame
             */
            eProsima_user_DllExport void target_frame(
                    std::string&& _target_frame);

            /*!
             * @brief This function returns a constant reference to member target_frame
             * @return Constant reference to member target_frame
             */
            eProsima_user_DllExport const std::string& target_frame() const;

            /*!
             * @brief This function returns a reference to member target_frame
             * @return Reference to member target_frame
             */
            eProsima_user_DllExport std::string& target_frame();
            /*!
             * @brief This function copies the value in member source_frame
             * @param _source_frame New value to be copied in member source_frame
             */
            eProsima_user_DllExport void source_frame(
                    const std::string& _source_frame);

            /*!
             * @brief This function moves the value in member source_frame
             * @param _source_frame New value to be moved in member source_frame
             */
            eProsima_user_DllExport void source_frame(
                    std::string&& _source_frame);

            /*!
             * @brief This function returns a constant reference to member source_frame
             * @return Constant reference to member source_frame
             */
            eProsima_user_DllExport const std::string& source_frame() const;

            /*!
             * @brief This function returns a reference to member source_frame
             * @return Reference to member source_frame
             */
            eProsima_user_DllExport std::string& source_frame();
            /*!
             * @brief This function copies the value in member source_time
             * @param _source_time New value to be copied in member source_time
             */
            eProsima_user_DllExport void source_time(
                    const builtin_interfaces::msg::Time& _source_time);

            /*!
             * @brief This function moves the value in member source_time
             * @param _source_time New value to be moved in member source_time
             */
            eProsima_user_DllExport void source_time(
                    builtin_interfaces::msg::Time&& _source_time);

            /*!
             * @brief This function returns a constant reference to member source_time
             * @return Constant reference to member source_time
             */
            eProsima_user_DllExport const builtin_interfaces::msg::Time& source_time() const;

            /*!
             * @brief This function returns a reference to member source_time
             * @return Reference to member source_time
             */
            eProsima_user_DllExport builtin_interfaces::msg::Time& source_time();
            /*!
             * @brief This function copies the value in member timeout
             * @param _timeout New value to be copied in member timeout
             */
            eProsima_user_DllExport void timeout(
                    const builtin_interfaces::msg::Duration& _timeout);

            /*!
             * @brief This function moves the value in member timeout
             * @param _timeout New value to be moved in member timeout
             */
            eProsima_user_DllExport void timeout(
                    builtin_interfaces::msg::Duration&& _timeout);

            /*!
             * @brief This function returns a constant reference to member timeout
             * @return Constant reference to member timeout
             */
            eProsima_user_DllExport const builtin_interfaces::msg::Duration& timeout() const;

            /*!
             * @brief This function returns a reference to member timeout
             * @return Reference to member timeout
             */
            eProsima_user_DllExport builtin_interfaces::msg::Duration& timeout();
            /*!
             * @brief This function copies the value in member target_time
             * @param _target_time New value to be copied in member target_time
             */
            eProsima_user_DllExport void target_time(
                    const builtin_interfaces::msg::Time& _target_time);

            /*!
             * @brief This function moves the value in member target_time
             * @param _target_time New value to be moved in member target_time
             */
            eProsima_user_DllExport void target_time(
                    builtin_interfaces::msg::Time&& _target_time);

            /*!
             * @brief This function returns a constant reference to member target_time
             * @return Constant reference to member target_time
             */
            eProsima_user_DllExport const builtin_interfaces::msg::Time& target_time() const;

            /*!
             * @brief This function returns a reference to member target_time
             * @return Reference to member target_time
             */
            eProsima_user_DllExport builtin_interfaces::msg::Time& target_time();
            /*!
             * @brief This function copies the value in member fixed_frame
             * @param _fixed_frame New value to be copied in member fixed_frame
             */
            eProsima_user_DllExport void fixed_frame(
                    const std::string& _fixed_frame);

            /*!
             * @brief This function moves the value in member fixed_frame
             * @param _fixed_frame New value to be moved in member fixed_frame
             */
            eProsima_user_DllExport void fixed_frame(
                    std::string&& _fixed_frame);

            /*!
             * @brief This function returns a constant reference to member fixed_frame
             * @return Constant reference to member fixed_frame
             */
            eProsima_user_DllExport const std::string& fixed_frame() const;

            /*!
             * @brief This function returns a reference to member fixed_frame
             * @return Reference to member fixed_frame
             */
            eProsima_user_DllExport std::string& fixed_frame();
            /*!
             * @brief This function sets a value in member advanced
             * @param _advanced New value for member advanced
             */
            eProsima_user_DllExport void advanced(
                    bool _advanced);

            /*!
             * @brief This function returns the value of member advanced
             * @return Value of member advanced
             */
            eProsima_user_DllExport bool advanced() const;

            /*!
             * @brief This function returns a reference to member advanced
             * @return Reference to member advanced
             */
            eProsima_user_DllExport bool& advanced();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tf2_msgs::action::LookupTransform_Goal& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_target_frame;
            std::string m_source_frame;
            builtin_interfaces::msg::Time m_source_time;
            builtin_interfaces::msg::Duration m_timeout;
            builtin_interfaces::msg::Time m_target_time;
            std::string m_fixed_frame;
            bool m_advanced;

        };
        /*!
         * @brief This class represents the structure LookupTransform_Result defined by the user in the IDL file.
         * @ingroup LOOKUPTRANSFORM
         */
        class LookupTransform_Result
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport LookupTransform_Result();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~LookupTransform_Result();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Result that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Result(
                    const LookupTransform_Result& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Result that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Result(
                    LookupTransform_Result&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Result that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Result& operator =(
                    const LookupTransform_Result& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Result that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Result& operator =(
                    LookupTransform_Result&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x tf2_msgs::action::LookupTransform_Result object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const LookupTransform_Result& x) const;

            /*!
             * @brief Comparison operator.
             * @param x tf2_msgs::action::LookupTransform_Result object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const LookupTransform_Result& x) const;

            /*!
             * @brief This function copies the value in member transform
             * @param _transform New value to be copied in member transform
             */
            eProsima_user_DllExport void transform(
                    const geometry_msgs::msg::TransformStamped& _transform);

            /*!
             * @brief This function moves the value in member transform
             * @param _transform New value to be moved in member transform
             */
            eProsima_user_DllExport void transform(
                    geometry_msgs::msg::TransformStamped&& _transform);

            /*!
             * @brief This function returns a constant reference to member transform
             * @return Constant reference to member transform
             */
            eProsima_user_DllExport const geometry_msgs::msg::TransformStamped& transform() const;

            /*!
             * @brief This function returns a reference to member transform
             * @return Reference to member transform
             */
            eProsima_user_DllExport geometry_msgs::msg::TransformStamped& transform();
            /*!
             * @brief This function copies the value in member error
             * @param _error New value to be copied in member error
             */
            eProsima_user_DllExport void error(
                    const tf2_msgs::msg::TF2Error& _error);

            /*!
             * @brief This function moves the value in member error
             * @param _error New value to be moved in member error
             */
            eProsima_user_DllExport void error(
                    tf2_msgs::msg::TF2Error&& _error);

            /*!
             * @brief This function returns a constant reference to member error
             * @return Constant reference to member error
             */
            eProsima_user_DllExport const tf2_msgs::msg::TF2Error& error() const;

            /*!
             * @brief This function returns a reference to member error
             * @return Reference to member error
             */
            eProsima_user_DllExport tf2_msgs::msg::TF2Error& error();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tf2_msgs::action::LookupTransform_Result& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::TransformStamped m_transform;
            tf2_msgs::msg::TF2Error m_error;

        };
        /*!
         * @brief This class represents the structure LookupTransform_Feedback defined by the user in the IDL file.
         * @ingroup LOOKUPTRANSFORM
         */
        class LookupTransform_Feedback
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport LookupTransform_Feedback();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~LookupTransform_Feedback();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Feedback that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Feedback(
                    const LookupTransform_Feedback& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Feedback that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Feedback(
                    LookupTransform_Feedback&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Feedback that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Feedback& operator =(
                    const LookupTransform_Feedback& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tf2_msgs::action::LookupTransform_Feedback that will be copied.
             */
            eProsima_user_DllExport LookupTransform_Feedback& operator =(
                    LookupTransform_Feedback&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x tf2_msgs::action::LookupTransform_Feedback object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const LookupTransform_Feedback& x) const;

            /*!
             * @brief Comparison operator.
             * @param x tf2_msgs::action::LookupTransform_Feedback object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const LookupTransform_Feedback& x) const;

            /*!
             * @brief This function sets a value in member structure_needs_at_least_one_member
             * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
             */
            eProsima_user_DllExport void structure_needs_at_least_one_member(
                    uint8_t _structure_needs_at_least_one_member);

            /*!
             * @brief This function returns the value of member structure_needs_at_least_one_member
             * @return Value of member structure_needs_at_least_one_member
             */
            eProsima_user_DllExport uint8_t structure_needs_at_least_one_member() const;

            /*!
             * @brief This function returns a reference to member structure_needs_at_least_one_member
             * @return Reference to member structure_needs_at_least_one_member
             */
            eProsima_user_DllExport uint8_t& structure_needs_at_least_one_member();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tf2_msgs::action::LookupTransform_Feedback& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_structure_needs_at_least_one_member;

        };
    } // namespace action
} // namespace tf2_msgs

#endif // _FAST_DDS_GENERATED_TF2_MSGS_ACTION_LOOKUPTRANSFORM_H_