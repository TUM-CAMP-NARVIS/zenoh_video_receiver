// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Hololens2EyeTracking.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2EYETRACKING_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2EYETRACKING_H_

#include "geometry_msgs/msg/Vector3.h"
#include "pcpd_msgs/msg/Types.h"
#include "geometry_msgs/msg/Quaternion.h"
#include "std_msgs/msg/Header.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Hololens2EyeTracking_SOURCE)
#define Hololens2EyeTracking_DllAPI __declspec( dllexport )
#else
#define Hololens2EyeTracking_DllAPI __declspec( dllimport )
#endif // Hololens2EyeTracking_SOURCE
#else
#define Hololens2EyeTracking_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Hololens2EyeTracking_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Hololens2EyeTracking defined by the user in the IDL file.
         * @ingroup HOLOLENS2EYETRACKING
         */
        class Hololens2EyeTracking
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2EyeTracking();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2EyeTracking();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2EyeTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2EyeTracking(
                    const Hololens2EyeTracking& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2EyeTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2EyeTracking(
                    Hololens2EyeTracking&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2EyeTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2EyeTracking& operator =(
                    const Hololens2EyeTracking& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2EyeTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2EyeTracking& operator =(
                    Hololens2EyeTracking&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2EyeTracking object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2EyeTracking& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2EyeTracking object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2EyeTracking& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();
            /*!
             * @brief This function copies the value in member c_origin
             * @param _c_origin New value to be copied in member c_origin
             */
            eProsima_user_DllExport void c_origin(
                    const geometry_msgs::msg::Vector3& _c_origin);

            /*!
             * @brief This function moves the value in member c_origin
             * @param _c_origin New value to be moved in member c_origin
             */
            eProsima_user_DllExport void c_origin(
                    geometry_msgs::msg::Vector3&& _c_origin);

            /*!
             * @brief This function returns a constant reference to member c_origin
             * @return Constant reference to member c_origin
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& c_origin() const;

            /*!
             * @brief This function returns a reference to member c_origin
             * @return Reference to member c_origin
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& c_origin();
            /*!
             * @brief This function copies the value in member c_direction
             * @param _c_direction New value to be copied in member c_direction
             */
            eProsima_user_DllExport void c_direction(
                    const geometry_msgs::msg::Vector3& _c_direction);

            /*!
             * @brief This function moves the value in member c_direction
             * @param _c_direction New value to be moved in member c_direction
             */
            eProsima_user_DllExport void c_direction(
                    geometry_msgs::msg::Vector3&& _c_direction);

            /*!
             * @brief This function returns a constant reference to member c_direction
             * @return Constant reference to member c_direction
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& c_direction() const;

            /*!
             * @brief This function returns a reference to member c_direction
             * @return Reference to member c_direction
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& c_direction();
            /*!
             * @brief This function copies the value in member l_origin
             * @param _l_origin New value to be copied in member l_origin
             */
            eProsima_user_DllExport void l_origin(
                    const geometry_msgs::msg::Vector3& _l_origin);

            /*!
             * @brief This function moves the value in member l_origin
             * @param _l_origin New value to be moved in member l_origin
             */
            eProsima_user_DllExport void l_origin(
                    geometry_msgs::msg::Vector3&& _l_origin);

            /*!
             * @brief This function returns a constant reference to member l_origin
             * @return Constant reference to member l_origin
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& l_origin() const;

            /*!
             * @brief This function returns a reference to member l_origin
             * @return Reference to member l_origin
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& l_origin();
            /*!
             * @brief This function copies the value in member l_direction
             * @param _l_direction New value to be copied in member l_direction
             */
            eProsima_user_DllExport void l_direction(
                    const geometry_msgs::msg::Vector3& _l_direction);

            /*!
             * @brief This function moves the value in member l_direction
             * @param _l_direction New value to be moved in member l_direction
             */
            eProsima_user_DllExport void l_direction(
                    geometry_msgs::msg::Vector3&& _l_direction);

            /*!
             * @brief This function returns a constant reference to member l_direction
             * @return Constant reference to member l_direction
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& l_direction() const;

            /*!
             * @brief This function returns a reference to member l_direction
             * @return Reference to member l_direction
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& l_direction();
            /*!
             * @brief This function copies the value in member r_origin
             * @param _r_origin New value to be copied in member r_origin
             */
            eProsima_user_DllExport void r_origin(
                    const geometry_msgs::msg::Vector3& _r_origin);

            /*!
             * @brief This function moves the value in member r_origin
             * @param _r_origin New value to be moved in member r_origin
             */
            eProsima_user_DllExport void r_origin(
                    geometry_msgs::msg::Vector3&& _r_origin);

            /*!
             * @brief This function returns a constant reference to member r_origin
             * @return Constant reference to member r_origin
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& r_origin() const;

            /*!
             * @brief This function returns a reference to member r_origin
             * @return Reference to member r_origin
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& r_origin();
            /*!
             * @brief This function copies the value in member r_direction
             * @param _r_direction New value to be copied in member r_direction
             */
            eProsima_user_DllExport void r_direction(
                    const geometry_msgs::msg::Vector3& _r_direction);

            /*!
             * @brief This function moves the value in member r_direction
             * @param _r_direction New value to be moved in member r_direction
             */
            eProsima_user_DllExport void r_direction(
                    geometry_msgs::msg::Vector3&& _r_direction);

            /*!
             * @brief This function returns a constant reference to member r_direction
             * @return Constant reference to member r_direction
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& r_direction() const;

            /*!
             * @brief This function returns a reference to member r_direction
             * @return Reference to member r_direction
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& r_direction();
            /*!
             * @brief This function sets a value in member l_openness
             * @param _l_openness New value for member l_openness
             */
            eProsima_user_DllExport void l_openness(
                    float _l_openness);

            /*!
             * @brief This function returns the value of member l_openness
             * @return Value of member l_openness
             */
            eProsima_user_DllExport float l_openness() const;

            /*!
             * @brief This function returns a reference to member l_openness
             * @return Reference to member l_openness
             */
            eProsima_user_DllExport float& l_openness();

            /*!
             * @brief This function sets a value in member r_openness
             * @param _r_openness New value for member r_openness
             */
            eProsima_user_DllExport void r_openness(
                    float _r_openness);

            /*!
             * @brief This function returns the value of member r_openness
             * @return Value of member r_openness
             */
            eProsima_user_DllExport float r_openness() const;

            /*!
             * @brief This function returns a reference to member r_openness
             * @return Reference to member r_openness
             */
            eProsima_user_DllExport float& r_openness();

            /*!
             * @brief This function sets a value in member vergence_distance
             * @param _vergence_distance New value for member vergence_distance
             */
            eProsima_user_DllExport void vergence_distance(
                    float _vergence_distance);

            /*!
             * @brief This function returns the value of member vergence_distance
             * @return Value of member vergence_distance
             */
            eProsima_user_DllExport float vergence_distance() const;

            /*!
             * @brief This function returns a reference to member vergence_distance
             * @return Reference to member vergence_distance
             */
            eProsima_user_DllExport float& vergence_distance();

            /*!
             * @brief This function sets a value in member valid
             * @param _valid New value for member valid
             */
            eProsima_user_DllExport void valid(
                    uint32_t _valid);

            /*!
             * @brief This function returns the value of member valid
             * @return Value of member valid
             */
            eProsima_user_DllExport uint32_t valid() const;

            /*!
             * @brief This function returns a reference to member valid
             * @return Reference to member valid
             */
            eProsima_user_DllExport uint32_t& valid();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2EyeTracking& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;
            geometry_msgs::msg::Vector3 m_c_origin;
            geometry_msgs::msg::Vector3 m_c_direction;
            geometry_msgs::msg::Vector3 m_l_origin;
            geometry_msgs::msg::Vector3 m_l_direction;
            geometry_msgs::msg::Vector3 m_r_origin;
            geometry_msgs::msg::Vector3 m_r_direction;
            float m_l_openness;
            float m_r_openness;
            float m_vergence_distance;
            uint32_t m_valid;

        };
    } // namespace msg
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2EYETRACKING_H_