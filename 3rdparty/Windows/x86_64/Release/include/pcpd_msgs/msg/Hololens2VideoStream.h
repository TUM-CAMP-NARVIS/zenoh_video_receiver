// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Hololens2VideoStream.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2VIDEOSTREAM_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2VIDEOSTREAM_H_

#include "geometry_msgs/msg/Vector3.h"
#include "pcpd_msgs/msg/Types.h"
#include "geometry_msgs/msg/Quaternion.h"
#include "std_msgs/msg/Header.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Hololens2VideoStream_SOURCE)
#define Hololens2VideoStream_DllAPI __declspec( dllexport )
#else
#define Hololens2VideoStream_DllAPI __declspec( dllimport )
#endif // Hololens2VideoStream_SOURCE
#else
#define Hololens2VideoStream_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Hololens2VideoStream_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Hololens2VideoStream defined by the user in the IDL file.
         * @ingroup HOLOLENS2VIDEOSTREAM
         */
        class Hololens2VideoStream
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2VideoStream();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2VideoStream();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2VideoStream that will be copied.
             */
            eProsima_user_DllExport Hololens2VideoStream(
                    const Hololens2VideoStream& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2VideoStream that will be copied.
             */
            eProsima_user_DllExport Hololens2VideoStream(
                    Hololens2VideoStream&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2VideoStream that will be copied.
             */
            eProsima_user_DllExport Hololens2VideoStream& operator =(
                    const Hololens2VideoStream& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2VideoStream that will be copied.
             */
            eProsima_user_DllExport Hololens2VideoStream& operator =(
                    Hololens2VideoStream&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2VideoStream object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2VideoStream& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2VideoStream object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2VideoStream& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();
            /*!
             * @brief This function copies the value in member camera_focal_length
             * @param _camera_focal_length New value to be copied in member camera_focal_length
             */
            eProsima_user_DllExport void camera_focal_length(
                    const pcpd_msgs::msg::float__2& _camera_focal_length);

            /*!
             * @brief This function moves the value in member camera_focal_length
             * @param _camera_focal_length New value to be moved in member camera_focal_length
             */
            eProsima_user_DllExport void camera_focal_length(
                    pcpd_msgs::msg::float__2&& _camera_focal_length);

            /*!
             * @brief This function returns a constant reference to member camera_focal_length
             * @return Constant reference to member camera_focal_length
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__2& camera_focal_length() const;

            /*!
             * @brief This function returns a reference to member camera_focal_length
             * @return Reference to member camera_focal_length
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__2& camera_focal_length();
            /*!
             * @brief This function copies the value in member camera_principal_point
             * @param _camera_principal_point New value to be copied in member camera_principal_point
             */
            eProsima_user_DllExport void camera_principal_point(
                    const pcpd_msgs::msg::float__2& _camera_principal_point);

            /*!
             * @brief This function moves the value in member camera_principal_point
             * @param _camera_principal_point New value to be moved in member camera_principal_point
             */
            eProsima_user_DllExport void camera_principal_point(
                    pcpd_msgs::msg::float__2&& _camera_principal_point);

            /*!
             * @brief This function returns a constant reference to member camera_principal_point
             * @return Constant reference to member camera_principal_point
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__2& camera_principal_point() const;

            /*!
             * @brief This function returns a reference to member camera_principal_point
             * @return Reference to member camera_principal_point
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__2& camera_principal_point();
            /*!
             * @brief This function copies the value in member camera_radial_distortion
             * @param _camera_radial_distortion New value to be copied in member camera_radial_distortion
             */
            eProsima_user_DllExport void camera_radial_distortion(
                    const pcpd_msgs::msg::float__3& _camera_radial_distortion);

            /*!
             * @brief This function moves the value in member camera_radial_distortion
             * @param _camera_radial_distortion New value to be moved in member camera_radial_distortion
             */
            eProsima_user_DllExport void camera_radial_distortion(
                    pcpd_msgs::msg::float__3&& _camera_radial_distortion);

            /*!
             * @brief This function returns a constant reference to member camera_radial_distortion
             * @return Constant reference to member camera_radial_distortion
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__3& camera_radial_distortion() const;

            /*!
             * @brief This function returns a reference to member camera_radial_distortion
             * @return Reference to member camera_radial_distortion
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__3& camera_radial_distortion();
            /*!
             * @brief This function copies the value in member camera_tangential_distortion
             * @param _camera_tangential_distortion New value to be copied in member camera_tangential_distortion
             */
            eProsima_user_DllExport void camera_tangential_distortion(
                    const pcpd_msgs::msg::float__2& _camera_tangential_distortion);

            /*!
             * @brief This function moves the value in member camera_tangential_distortion
             * @param _camera_tangential_distortion New value to be moved in member camera_tangential_distortion
             */
            eProsima_user_DllExport void camera_tangential_distortion(
                    pcpd_msgs::msg::float__2&& _camera_tangential_distortion);

            /*!
             * @brief This function returns a constant reference to member camera_tangential_distortion
             * @return Constant reference to member camera_tangential_distortion
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__2& camera_tangential_distortion() const;

            /*!
             * @brief This function returns a reference to member camera_tangential_distortion
             * @return Reference to member camera_tangential_distortion
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__2& camera_tangential_distortion();
            /*!
             * @brief This function sets a value in member image_bytes
             * @param _image_bytes New value for member image_bytes
             */
            eProsima_user_DllExport void image_bytes(
                    uint64_t _image_bytes);

            /*!
             * @brief This function returns the value of member image_bytes
             * @return Value of member image_bytes
             */
            eProsima_user_DllExport uint64_t image_bytes() const;

            /*!
             * @brief This function returns a reference to member image_bytes
             * @return Reference to member image_bytes
             */
            eProsima_user_DllExport uint64_t& image_bytes();

            /*!
             * @brief This function copies the value in member image
             * @param _image New value to be copied in member image
             */
            eProsima_user_DllExport void image(
                    const std::vector<uint8_t>& _image);

            /*!
             * @brief This function moves the value in member image
             * @param _image New value to be moved in member image
             */
            eProsima_user_DllExport void image(
                    std::vector<uint8_t>&& _image);

            /*!
             * @brief This function returns a constant reference to member image
             * @return Constant reference to member image
             */
            eProsima_user_DllExport const std::vector<uint8_t>& image() const;

            /*!
             * @brief This function returns a reference to member image
             * @return Reference to member image
             */
            eProsima_user_DllExport std::vector<uint8_t>& image();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2VideoStream& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;
            pcpd_msgs::msg::float__2 m_camera_focal_length;
            pcpd_msgs::msg::float__2 m_camera_principal_point;
            pcpd_msgs::msg::float__3 m_camera_radial_distortion;
            pcpd_msgs::msg::float__2 m_camera_tangential_distortion;
            uint64_t m_image_bytes;
            std::vector<uint8_t> m_image;

        };
    } // namespace msg
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2VIDEOSTREAM_H_