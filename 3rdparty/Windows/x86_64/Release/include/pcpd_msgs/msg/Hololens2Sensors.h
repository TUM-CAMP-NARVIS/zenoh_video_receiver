// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Hololens2Sensors.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2SENSORS_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2SENSORS_H_

#include "geometry_msgs/msg/Vector3.h"
#include "pcpd_msgs/msg/Types.h"
#include "geometry_msgs/msg/Quaternion.h"
#include "std_msgs/msg/Header.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Hololens2Sensors_SOURCE)
#define Hololens2Sensors_DllAPI __declspec( dllexport )
#else
#define Hololens2Sensors_DllAPI __declspec( dllimport )
#endif // Hololens2Sensors_SOURCE
#else
#define Hololens2Sensors_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Hololens2Sensors_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Hololens2StreamDescriptor defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2StreamDescriptor
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2StreamDescriptor();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2StreamDescriptor();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2StreamDescriptor that will be copied.
             */
            eProsima_user_DllExport Hololens2StreamDescriptor(
                    const Hololens2StreamDescriptor& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2StreamDescriptor that will be copied.
             */
            eProsima_user_DllExport Hololens2StreamDescriptor(
                    Hololens2StreamDescriptor&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2StreamDescriptor that will be copied.
             */
            eProsima_user_DllExport Hololens2StreamDescriptor& operator =(
                    const Hololens2StreamDescriptor& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2StreamDescriptor that will be copied.
             */
            eProsima_user_DllExport Hololens2StreamDescriptor& operator =(
                    Hololens2StreamDescriptor&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2StreamDescriptor object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2StreamDescriptor& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2StreamDescriptor object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2StreamDescriptor& x) const;

            /*!
             * @brief This function copies the value in member stream_topic
             * @param _stream_topic New value to be copied in member stream_topic
             */
            eProsima_user_DllExport void stream_topic(
                    const std::string& _stream_topic);

            /*!
             * @brief This function moves the value in member stream_topic
             * @param _stream_topic New value to be moved in member stream_topic
             */
            eProsima_user_DllExport void stream_topic(
                    std::string&& _stream_topic);

            /*!
             * @brief This function returns a constant reference to member stream_topic
             * @return Constant reference to member stream_topic
             */
            eProsima_user_DllExport const std::string& stream_topic() const;

            /*!
             * @brief This function returns a reference to member stream_topic
             * @return Reference to member stream_topic
             */
            eProsima_user_DllExport std::string& stream_topic();
            /*!
             * @brief This function copies the value in member calib_topic
             * @param _calib_topic New value to be copied in member calib_topic
             */
            eProsima_user_DllExport void calib_topic(
                    const std::string& _calib_topic);

            /*!
             * @brief This function moves the value in member calib_topic
             * @param _calib_topic New value to be moved in member calib_topic
             */
            eProsima_user_DllExport void calib_topic(
                    std::string&& _calib_topic);

            /*!
             * @brief This function returns a constant reference to member calib_topic
             * @return Constant reference to member calib_topic
             */
            eProsima_user_DllExport const std::string& calib_topic() const;

            /*!
             * @brief This function returns a reference to member calib_topic
             * @return Reference to member calib_topic
             */
            eProsima_user_DllExport std::string& calib_topic();
            /*!
             * @brief This function sets a value in member sensor_type
             * @param _sensor_type New value for member sensor_type
             */
            eProsima_user_DllExport void sensor_type(
                    pcpd_msgs::msg::Hololens2SensorType _sensor_type);

            /*!
             * @brief This function returns the value of member sensor_type
             * @return Value of member sensor_type
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2SensorType sensor_type() const;

            /*!
             * @brief This function returns a reference to member sensor_type
             * @return Reference to member sensor_type
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2SensorType& sensor_type();

            /*!
             * @brief This function sets a value in member frame_rate
             * @param _frame_rate New value for member frame_rate
             */
            eProsima_user_DllExport void frame_rate(
                    uint32_t _frame_rate);

            /*!
             * @brief This function returns the value of member frame_rate
             * @return Value of member frame_rate
             */
            eProsima_user_DllExport uint32_t frame_rate() const;

            /*!
             * @brief This function returns a reference to member frame_rate
             * @return Reference to member frame_rate
             */
            eProsima_user_DllExport uint32_t& frame_rate();

            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();
            /*!
             * @brief This function sets a value in member image_height
             * @param _image_height New value for member image_height
             */
            eProsima_user_DllExport void image_height(
                    uint32_t _image_height);

            /*!
             * @brief This function returns the value of member image_height
             * @return Value of member image_height
             */
            eProsima_user_DllExport uint32_t image_height() const;

            /*!
             * @brief This function returns a reference to member image_height
             * @return Reference to member image_height
             */
            eProsima_user_DllExport uint32_t& image_height();

            /*!
             * @brief This function sets a value in member image_width
             * @param _image_width New value for member image_width
             */
            eProsima_user_DllExport void image_width(
                    uint32_t _image_width);

            /*!
             * @brief This function returns the value of member image_width
             * @return Value of member image_width
             */
            eProsima_user_DllExport uint32_t image_width() const;

            /*!
             * @brief This function returns a reference to member image_width
             * @return Reference to member image_width
             */
            eProsima_user_DllExport uint32_t& image_width();

            /*!
             * @brief This function sets a value in member image_step
             * @param _image_step New value for member image_step
             */
            eProsima_user_DllExport void image_step(
                    uint32_t _image_step);

            /*!
             * @brief This function returns the value of member image_step
             * @return Value of member image_step
             */
            eProsima_user_DllExport uint32_t image_step() const;

            /*!
             * @brief This function returns a reference to member image_step
             * @return Reference to member image_step
             */
            eProsima_user_DllExport uint32_t& image_step();

            /*!
             * @brief This function sets a value in member image_format
             * @param _image_format New value for member image_format
             */
            eProsima_user_DllExport void image_format(
                    pcpd_msgs::msg::Hololens2PixelFormat _image_format);

            /*!
             * @brief This function returns the value of member image_format
             * @return Value of member image_format
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2PixelFormat image_format() const;

            /*!
             * @brief This function returns a reference to member image_format
             * @return Reference to member image_format
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2PixelFormat& image_format();

            /*!
             * @brief This function sets a value in member image_compression
             * @param _image_compression New value for member image_compression
             */
            eProsima_user_DllExport void image_compression(
                    pcpd_msgs::msg::Hololens2ImageCompression _image_compression);

            /*!
             * @brief This function returns the value of member image_compression
             * @return Value of member image_compression
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2ImageCompression image_compression() const;

            /*!
             * @brief This function returns a reference to member image_compression
             * @return Reference to member image_compression
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2ImageCompression& image_compression();

            /*!
             * @brief This function sets a value in member h26x_profile
             * @param _h26x_profile New value for member h26x_profile
             */
            eProsima_user_DllExport void h26x_profile(
                    pcpd_msgs::msg::Hololens2H26xProfile _h26x_profile);

            /*!
             * @brief This function returns the value of member h26x_profile
             * @return Value of member h26x_profile
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2H26xProfile h26x_profile() const;

            /*!
             * @brief This function returns a reference to member h26x_profile
             * @return Reference to member h26x_profile
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2H26xProfile& h26x_profile();

            /*!
             * @brief This function sets a value in member h26x_bitrate
             * @param _h26x_bitrate New value for member h26x_bitrate
             */
            eProsima_user_DllExport void h26x_bitrate(
                    uint32_t _h26x_bitrate);

            /*!
             * @brief This function returns the value of member h26x_bitrate
             * @return Value of member h26x_bitrate
             */
            eProsima_user_DllExport uint32_t h26x_bitrate() const;

            /*!
             * @brief This function returns a reference to member h26x_bitrate
             * @return Reference to member h26x_bitrate
             */
            eProsima_user_DllExport uint32_t& h26x_bitrate();

            /*!
             * @brief This function sets a value in member audio_channels
             * @param _audio_channels New value for member audio_channels
             */
            eProsima_user_DllExport void audio_channels(
                    uint8_t _audio_channels);

            /*!
             * @brief This function returns the value of member audio_channels
             * @return Value of member audio_channels
             */
            eProsima_user_DllExport uint8_t audio_channels() const;

            /*!
             * @brief This function returns a reference to member audio_channels
             * @return Reference to member audio_channels
             */
            eProsima_user_DllExport uint8_t& audio_channels();

            /*!
             * @brief This function sets a value in member aac_profile
             * @param _aac_profile New value for member aac_profile
             */
            eProsima_user_DllExport void aac_profile(
                    pcpd_msgs::msg::Hololens2AACProfile _aac_profile);

            /*!
             * @brief This function returns the value of member aac_profile
             * @return Value of member aac_profile
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2AACProfile aac_profile() const;

            /*!
             * @brief This function returns a reference to member aac_profile
             * @return Reference to member aac_profile
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2AACProfile& aac_profile();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2StreamDescriptor& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_stream_topic;
            std::string m_calib_topic;
            pcpd_msgs::msg::Hololens2SensorType m_sensor_type;
            uint32_t m_frame_rate;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;
            uint32_t m_image_height;
            uint32_t m_image_width;
            uint32_t m_image_step;
            pcpd_msgs::msg::Hololens2PixelFormat m_image_format;
            pcpd_msgs::msg::Hololens2ImageCompression m_image_compression;
            pcpd_msgs::msg::Hololens2H26xProfile m_h26x_profile;
            uint32_t m_h26x_bitrate;
            uint8_t m_audio_channels;
            pcpd_msgs::msg::Hololens2AACProfile m_aac_profile;

        };
        /*!
         * @brief This class represents the structure Hololens2RigidTransform defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2RigidTransform
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2RigidTransform();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2RigidTransform();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2RigidTransform that will be copied.
             */
            eProsima_user_DllExport Hololens2RigidTransform(
                    const Hololens2RigidTransform& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2RigidTransform that will be copied.
             */
            eProsima_user_DllExport Hololens2RigidTransform(
                    Hololens2RigidTransform&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2RigidTransform that will be copied.
             */
            eProsima_user_DllExport Hololens2RigidTransform& operator =(
                    const Hololens2RigidTransform& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2RigidTransform that will be copied.
             */
            eProsima_user_DllExport Hololens2RigidTransform& operator =(
                    Hololens2RigidTransform&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2RigidTransform object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2RigidTransform& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2RigidTransform object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2RigidTransform& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2RigidTransform& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure Hololens2SensorInfoVLC defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2SensorInfoVLC
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2SensorInfoVLC();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2SensorInfoVLC();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoVLC that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoVLC(
                    const Hololens2SensorInfoVLC& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoVLC that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoVLC(
                    Hololens2SensorInfoVLC&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoVLC that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoVLC& operator =(
                    const Hololens2SensorInfoVLC& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoVLC that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoVLC& operator =(
                    Hololens2SensorInfoVLC&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorInfoVLC object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2SensorInfoVLC& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorInfoVLC object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2SensorInfoVLC& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member uv2x
             * @param _uv2x New value to be copied in member uv2x
             */
            eProsima_user_DllExport void uv2x(
                    const std::vector<float>& _uv2x);

            /*!
             * @brief This function moves the value in member uv2x
             * @param _uv2x New value to be moved in member uv2x
             */
            eProsima_user_DllExport void uv2x(
                    std::vector<float>&& _uv2x);

            /*!
             * @brief This function returns a constant reference to member uv2x
             * @return Constant reference to member uv2x
             */
            eProsima_user_DllExport const std::vector<float>& uv2x() const;

            /*!
             * @brief This function returns a reference to member uv2x
             * @return Reference to member uv2x
             */
            eProsima_user_DllExport std::vector<float>& uv2x();
            /*!
             * @brief This function copies the value in member uv2y
             * @param _uv2y New value to be copied in member uv2y
             */
            eProsima_user_DllExport void uv2y(
                    const std::vector<float>& _uv2y);

            /*!
             * @brief This function moves the value in member uv2y
             * @param _uv2y New value to be moved in member uv2y
             */
            eProsima_user_DllExport void uv2y(
                    std::vector<float>&& _uv2y);

            /*!
             * @brief This function returns a constant reference to member uv2y
             * @return Constant reference to member uv2y
             */
            eProsima_user_DllExport const std::vector<float>& uv2y() const;

            /*!
             * @brief This function returns a reference to member uv2y
             * @return Reference to member uv2y
             */
            eProsima_user_DllExport std::vector<float>& uv2y();
            /*!
             * @brief This function copies the value in member mapx
             * @param _mapx New value to be copied in member mapx
             */
            eProsima_user_DllExport void mapx(
                    const std::vector<float>& _mapx);

            /*!
             * @brief This function moves the value in member mapx
             * @param _mapx New value to be moved in member mapx
             */
            eProsima_user_DllExport void mapx(
                    std::vector<float>&& _mapx);

            /*!
             * @brief This function returns a constant reference to member mapx
             * @return Constant reference to member mapx
             */
            eProsima_user_DllExport const std::vector<float>& mapx() const;

            /*!
             * @brief This function returns a reference to member mapx
             * @return Reference to member mapx
             */
            eProsima_user_DllExport std::vector<float>& mapx();
            /*!
             * @brief This function copies the value in member mapy
             * @param _mapy New value to be copied in member mapy
             */
            eProsima_user_DllExport void mapy(
                    const std::vector<float>& _mapy);

            /*!
             * @brief This function moves the value in member mapy
             * @param _mapy New value to be moved in member mapy
             */
            eProsima_user_DllExport void mapy(
                    std::vector<float>&& _mapy);

            /*!
             * @brief This function returns a constant reference to member mapy
             * @return Constant reference to member mapy
             */
            eProsima_user_DllExport const std::vector<float>& mapy() const;

            /*!
             * @brief This function returns a reference to member mapy
             * @return Reference to member mapy
             */
            eProsima_user_DllExport std::vector<float>& mapy();
            /*!
             * @brief This function copies the value in member K
             * @param _K New value to be copied in member K
             */
            eProsima_user_DllExport void K(
                    const pcpd_msgs::msg::float__4& _K);

            /*!
             * @brief This function moves the value in member K
             * @param _K New value to be moved in member K
             */
            eProsima_user_DllExport void K(
                    pcpd_msgs::msg::float__4&& _K);

            /*!
             * @brief This function returns a constant reference to member K
             * @return Constant reference to member K
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__4& K() const;

            /*!
             * @brief This function returns a reference to member K
             * @return Reference to member K
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__4& K();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2SensorInfoVLC& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            std::vector<float> m_uv2x;
            std::vector<float> m_uv2y;
            std::vector<float> m_mapx;
            std::vector<float> m_mapy;
            pcpd_msgs::msg::float__4 m_K;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure Hololens2SensorIntrinsicsPV defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2SensorIntrinsicsPV
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2SensorIntrinsicsPV();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2SensorIntrinsicsPV();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorIntrinsicsPV that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorIntrinsicsPV(
                    const Hololens2SensorIntrinsicsPV& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorIntrinsicsPV that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorIntrinsicsPV(
                    Hololens2SensorIntrinsicsPV&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorIntrinsicsPV that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorIntrinsicsPV& operator =(
                    const Hololens2SensorIntrinsicsPV& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorIntrinsicsPV that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorIntrinsicsPV& operator =(
                    Hololens2SensorIntrinsicsPV&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorIntrinsicsPV object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2SensorIntrinsicsPV& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorIntrinsicsPV object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2SensorIntrinsicsPV& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member width
             * @param _width New value for member width
             */
            eProsima_user_DllExport void width(
                    uint16_t _width);

            /*!
             * @brief This function returns the value of member width
             * @return Value of member width
             */
            eProsima_user_DllExport uint16_t width() const;

            /*!
             * @brief This function returns a reference to member width
             * @return Reference to member width
             */
            eProsima_user_DllExport uint16_t& width();

            /*!
             * @brief This function sets a value in member height
             * @param _height New value for member height
             */
            eProsima_user_DllExport void height(
                    uint16_t _height);

            /*!
             * @brief This function returns the value of member height
             * @return Value of member height
             */
            eProsima_user_DllExport uint16_t height() const;

            /*!
             * @brief This function returns a reference to member height
             * @return Reference to member height
             */
            eProsima_user_DllExport uint16_t& height();

            /*!
             * @brief This function copies the value in member focal_length
             * @param _focal_length New value to be copied in member focal_length
             */
            eProsima_user_DllExport void focal_length(
                    const pcpd_msgs::msg::float__2& _focal_length);

            /*!
             * @brief This function moves the value in member focal_length
             * @param _focal_length New value to be moved in member focal_length
             */
            eProsima_user_DllExport void focal_length(
                    pcpd_msgs::msg::float__2&& _focal_length);

            /*!
             * @brief This function returns a constant reference to member focal_length
             * @return Constant reference to member focal_length
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__2& focal_length() const;

            /*!
             * @brief This function returns a reference to member focal_length
             * @return Reference to member focal_length
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__2& focal_length();
            /*!
             * @brief This function copies the value in member principal_point
             * @param _principal_point New value to be copied in member principal_point
             */
            eProsima_user_DllExport void principal_point(
                    const pcpd_msgs::msg::float__2& _principal_point);

            /*!
             * @brief This function moves the value in member principal_point
             * @param _principal_point New value to be moved in member principal_point
             */
            eProsima_user_DllExport void principal_point(
                    pcpd_msgs::msg::float__2&& _principal_point);

            /*!
             * @brief This function returns a constant reference to member principal_point
             * @return Constant reference to member principal_point
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__2& principal_point() const;

            /*!
             * @brief This function returns a reference to member principal_point
             * @return Reference to member principal_point
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__2& principal_point();
            /*!
             * @brief This function copies the value in member radial_distortion
             * @param _radial_distortion New value to be copied in member radial_distortion
             */
            eProsima_user_DllExport void radial_distortion(
                    const pcpd_msgs::msg::float__3& _radial_distortion);

            /*!
             * @brief This function moves the value in member radial_distortion
             * @param _radial_distortion New value to be moved in member radial_distortion
             */
            eProsima_user_DllExport void radial_distortion(
                    pcpd_msgs::msg::float__3&& _radial_distortion);

            /*!
             * @brief This function returns a constant reference to member radial_distortion
             * @return Constant reference to member radial_distortion
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__3& radial_distortion() const;

            /*!
             * @brief This function returns a reference to member radial_distortion
             * @return Reference to member radial_distortion
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__3& radial_distortion();
            /*!
             * @brief This function copies the value in member tangential_distortion
             * @param _tangential_distortion New value to be copied in member tangential_distortion
             */
            eProsima_user_DllExport void tangential_distortion(
                    const pcpd_msgs::msg::float__2& _tangential_distortion);

            /*!
             * @brief This function moves the value in member tangential_distortion
             * @param _tangential_distortion New value to be moved in member tangential_distortion
             */
            eProsima_user_DllExport void tangential_distortion(
                    pcpd_msgs::msg::float__2&& _tangential_distortion);

            /*!
             * @brief This function returns a constant reference to member tangential_distortion
             * @return Constant reference to member tangential_distortion
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__2& tangential_distortion() const;

            /*!
             * @brief This function returns a reference to member tangential_distortion
             * @return Reference to member tangential_distortion
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__2& tangential_distortion();
            /*!
             * @brief This function copies the value in member undistorted_projection_transform
             * @param _undistorted_projection_transform New value to be copied in member undistorted_projection_transform
             */
            eProsima_user_DllExport void undistorted_projection_transform(
                    const pcpd_msgs::msg::float__16& _undistorted_projection_transform);

            /*!
             * @brief This function moves the value in member undistorted_projection_transform
             * @param _undistorted_projection_transform New value to be moved in member undistorted_projection_transform
             */
            eProsima_user_DllExport void undistorted_projection_transform(
                    pcpd_msgs::msg::float__16&& _undistorted_projection_transform);

            /*!
             * @brief This function returns a constant reference to member undistorted_projection_transform
             * @return Constant reference to member undistorted_projection_transform
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__16& undistorted_projection_transform() const;

            /*!
             * @brief This function returns a reference to member undistorted_projection_transform
             * @return Reference to member undistorted_projection_transform
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__16& undistorted_projection_transform();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2SensorIntrinsicsPV& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            uint16_t m_width;
            uint16_t m_height;
            pcpd_msgs::msg::float__2 m_focal_length;
            pcpd_msgs::msg::float__2 m_principal_point;
            pcpd_msgs::msg::float__3 m_radial_distortion;
            pcpd_msgs::msg::float__2 m_tangential_distortion;
            pcpd_msgs::msg::float__16 m_undistorted_projection_transform;

        };
        /*!
         * @brief This class represents the structure Hololens2SensorInfoZHT defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2SensorInfoZHT
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2SensorInfoZHT();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2SensorInfoZHT();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZHT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZHT(
                    const Hololens2SensorInfoZHT& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZHT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZHT(
                    Hololens2SensorInfoZHT&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZHT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZHT& operator =(
                    const Hololens2SensorInfoZHT& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZHT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZHT& operator =(
                    Hololens2SensorInfoZHT&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorInfoZHT object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2SensorInfoZHT& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorInfoZHT object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2SensorInfoZHT& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member scale
             * @param _scale New value for member scale
             */
            eProsima_user_DllExport void scale(
                    float _scale);

            /*!
             * @brief This function returns the value of member scale
             * @return Value of member scale
             */
            eProsima_user_DllExport float scale() const;

            /*!
             * @brief This function returns a reference to member scale
             * @return Reference to member scale
             */
            eProsima_user_DllExport float& scale();

            /*!
             * @brief This function sets a value in member alias
             * @param _alias New value for member alias
             */
            eProsima_user_DllExport void alias(
                    float _alias);

            /*!
             * @brief This function returns the value of member alias
             * @return Value of member alias
             */
            eProsima_user_DllExport float alias() const;

            /*!
             * @brief This function returns a reference to member alias
             * @return Reference to member alias
             */
            eProsima_user_DllExport float& alias();

            /*!
             * @brief This function copies the value in member uv2x
             * @param _uv2x New value to be copied in member uv2x
             */
            eProsima_user_DllExport void uv2x(
                    const std::vector<float>& _uv2x);

            /*!
             * @brief This function moves the value in member uv2x
             * @param _uv2x New value to be moved in member uv2x
             */
            eProsima_user_DllExport void uv2x(
                    std::vector<float>&& _uv2x);

            /*!
             * @brief This function returns a constant reference to member uv2x
             * @return Constant reference to member uv2x
             */
            eProsima_user_DllExport const std::vector<float>& uv2x() const;

            /*!
             * @brief This function returns a reference to member uv2x
             * @return Reference to member uv2x
             */
            eProsima_user_DllExport std::vector<float>& uv2x();
            /*!
             * @brief This function copies the value in member uv2y
             * @param _uv2y New value to be copied in member uv2y
             */
            eProsima_user_DllExport void uv2y(
                    const std::vector<float>& _uv2y);

            /*!
             * @brief This function moves the value in member uv2y
             * @param _uv2y New value to be moved in member uv2y
             */
            eProsima_user_DllExport void uv2y(
                    std::vector<float>&& _uv2y);

            /*!
             * @brief This function returns a constant reference to member uv2y
             * @return Constant reference to member uv2y
             */
            eProsima_user_DllExport const std::vector<float>& uv2y() const;

            /*!
             * @brief This function returns a reference to member uv2y
             * @return Reference to member uv2y
             */
            eProsima_user_DllExport std::vector<float>& uv2y();
            /*!
             * @brief This function copies the value in member mapx
             * @param _mapx New value to be copied in member mapx
             */
            eProsima_user_DllExport void mapx(
                    const std::vector<float>& _mapx);

            /*!
             * @brief This function moves the value in member mapx
             * @param _mapx New value to be moved in member mapx
             */
            eProsima_user_DllExport void mapx(
                    std::vector<float>&& _mapx);

            /*!
             * @brief This function returns a constant reference to member mapx
             * @return Constant reference to member mapx
             */
            eProsima_user_DllExport const std::vector<float>& mapx() const;

            /*!
             * @brief This function returns a reference to member mapx
             * @return Reference to member mapx
             */
            eProsima_user_DllExport std::vector<float>& mapx();
            /*!
             * @brief This function copies the value in member mapy
             * @param _mapy New value to be copied in member mapy
             */
            eProsima_user_DllExport void mapy(
                    const std::vector<float>& _mapy);

            /*!
             * @brief This function moves the value in member mapy
             * @param _mapy New value to be moved in member mapy
             */
            eProsima_user_DllExport void mapy(
                    std::vector<float>&& _mapy);

            /*!
             * @brief This function returns a constant reference to member mapy
             * @return Constant reference to member mapy
             */
            eProsima_user_DllExport const std::vector<float>& mapy() const;

            /*!
             * @brief This function returns a reference to member mapy
             * @return Reference to member mapy
             */
            eProsima_user_DllExport std::vector<float>& mapy();
            /*!
             * @brief This function copies the value in member K
             * @param _K New value to be copied in member K
             */
            eProsima_user_DllExport void K(
                    const pcpd_msgs::msg::float__4& _K);

            /*!
             * @brief This function moves the value in member K
             * @param _K New value to be moved in member K
             */
            eProsima_user_DllExport void K(
                    pcpd_msgs::msg::float__4&& _K);

            /*!
             * @brief This function returns a constant reference to member K
             * @return Constant reference to member K
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__4& K() const;

            /*!
             * @brief This function returns a reference to member K
             * @return Reference to member K
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__4& K();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2SensorInfoZHT& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            float m_scale;
            float m_alias;
            std::vector<float> m_uv2x;
            std::vector<float> m_uv2y;
            std::vector<float> m_mapx;
            std::vector<float> m_mapy;
            pcpd_msgs::msg::float__4 m_K;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure Hololens2SensorInfoZLT defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2SensorInfoZLT
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2SensorInfoZLT();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2SensorInfoZLT();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZLT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZLT(
                    const Hololens2SensorInfoZLT& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZLT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZLT(
                    Hololens2SensorInfoZLT&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZLT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZLT& operator =(
                    const Hololens2SensorInfoZLT& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2SensorInfoZLT that will be copied.
             */
            eProsima_user_DllExport Hololens2SensorInfoZLT& operator =(
                    Hololens2SensorInfoZLT&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorInfoZLT object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2SensorInfoZLT& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2SensorInfoZLT object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2SensorInfoZLT& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member scale
             * @param _scale New value for member scale
             */
            eProsima_user_DllExport void scale(
                    float _scale);

            /*!
             * @brief This function returns the value of member scale
             * @return Value of member scale
             */
            eProsima_user_DllExport float scale() const;

            /*!
             * @brief This function returns a reference to member scale
             * @return Reference to member scale
             */
            eProsima_user_DllExport float& scale();

            /*!
             * @brief This function copies the value in member uv2x
             * @param _uv2x New value to be copied in member uv2x
             */
            eProsima_user_DllExport void uv2x(
                    const std::vector<float>& _uv2x);

            /*!
             * @brief This function moves the value in member uv2x
             * @param _uv2x New value to be moved in member uv2x
             */
            eProsima_user_DllExport void uv2x(
                    std::vector<float>&& _uv2x);

            /*!
             * @brief This function returns a constant reference to member uv2x
             * @return Constant reference to member uv2x
             */
            eProsima_user_DllExport const std::vector<float>& uv2x() const;

            /*!
             * @brief This function returns a reference to member uv2x
             * @return Reference to member uv2x
             */
            eProsima_user_DllExport std::vector<float>& uv2x();
            /*!
             * @brief This function copies the value in member uv2y
             * @param _uv2y New value to be copied in member uv2y
             */
            eProsima_user_DllExport void uv2y(
                    const std::vector<float>& _uv2y);

            /*!
             * @brief This function moves the value in member uv2y
             * @param _uv2y New value to be moved in member uv2y
             */
            eProsima_user_DllExport void uv2y(
                    std::vector<float>&& _uv2y);

            /*!
             * @brief This function returns a constant reference to member uv2y
             * @return Constant reference to member uv2y
             */
            eProsima_user_DllExport const std::vector<float>& uv2y() const;

            /*!
             * @brief This function returns a reference to member uv2y
             * @return Reference to member uv2y
             */
            eProsima_user_DllExport std::vector<float>& uv2y();
            /*!
             * @brief This function copies the value in member mapx
             * @param _mapx New value to be copied in member mapx
             */
            eProsima_user_DllExport void mapx(
                    const std::vector<float>& _mapx);

            /*!
             * @brief This function moves the value in member mapx
             * @param _mapx New value to be moved in member mapx
             */
            eProsima_user_DllExport void mapx(
                    std::vector<float>&& _mapx);

            /*!
             * @brief This function returns a constant reference to member mapx
             * @return Constant reference to member mapx
             */
            eProsima_user_DllExport const std::vector<float>& mapx() const;

            /*!
             * @brief This function returns a reference to member mapx
             * @return Reference to member mapx
             */
            eProsima_user_DllExport std::vector<float>& mapx();
            /*!
             * @brief This function copies the value in member mapy
             * @param _mapy New value to be copied in member mapy
             */
            eProsima_user_DllExport void mapy(
                    const std::vector<float>& _mapy);

            /*!
             * @brief This function moves the value in member mapy
             * @param _mapy New value to be moved in member mapy
             */
            eProsima_user_DllExport void mapy(
                    std::vector<float>&& _mapy);

            /*!
             * @brief This function returns a constant reference to member mapy
             * @return Constant reference to member mapy
             */
            eProsima_user_DllExport const std::vector<float>& mapy() const;

            /*!
             * @brief This function returns a reference to member mapy
             * @return Reference to member mapy
             */
            eProsima_user_DllExport std::vector<float>& mapy();
            /*!
             * @brief This function copies the value in member K
             * @param _K New value to be copied in member K
             */
            eProsima_user_DllExport void K(
                    const pcpd_msgs::msg::float__4& _K);

            /*!
             * @brief This function moves the value in member K
             * @param _K New value to be moved in member K
             */
            eProsima_user_DllExport void K(
                    pcpd_msgs::msg::float__4&& _K);

            /*!
             * @brief This function returns a constant reference to member K
             * @return Constant reference to member K
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__4& K() const;

            /*!
             * @brief This function returns a reference to member K
             * @return Reference to member K
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__4& K();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2SensorInfoZLT& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            float m_scale;
            std::vector<float> m_uv2x;
            std::vector<float> m_uv2y;
            std::vector<float> m_mapx;
            std::vector<float> m_mapy;
            pcpd_msgs::msg::float__4 m_K;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure Hololens2ImuAccel defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2ImuAccel
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2ImuAccel();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2ImuAccel();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuAccel that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuAccel(
                    const Hololens2ImuAccel& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuAccel that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuAccel(
                    Hololens2ImuAccel&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuAccel that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuAccel& operator =(
                    const Hololens2ImuAccel& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuAccel that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuAccel& operator =(
                    Hololens2ImuAccel&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2ImuAccel object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2ImuAccel& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2ImuAccel object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2ImuAccel& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member vinyl_hup_ticks
             * @param _vinyl_hup_ticks New value for member vinyl_hup_ticks
             */
            eProsima_user_DllExport void vinyl_hup_ticks(
                    uint64_t _vinyl_hup_ticks);

            /*!
             * @brief This function returns the value of member vinyl_hup_ticks
             * @return Value of member vinyl_hup_ticks
             */
            eProsima_user_DllExport uint64_t vinyl_hup_ticks() const;

            /*!
             * @brief This function returns a reference to member vinyl_hup_ticks
             * @return Reference to member vinyl_hup_ticks
             */
            eProsima_user_DllExport uint64_t& vinyl_hup_ticks();

            /*!
             * @brief This function sets a value in member soc_ticks
             * @param _soc_ticks New value for member soc_ticks
             */
            eProsima_user_DllExport void soc_ticks(
                    uint64_t _soc_ticks);

            /*!
             * @brief This function returns the value of member soc_ticks
             * @return Value of member soc_ticks
             */
            eProsima_user_DllExport uint64_t soc_ticks() const;

            /*!
             * @brief This function returns a reference to member soc_ticks
             * @return Reference to member soc_ticks
             */
            eProsima_user_DllExport uint64_t& soc_ticks();

            /*!
             * @brief This function copies the value in member values
             * @param _values New value to be copied in member values
             */
            eProsima_user_DllExport void values(
                    const pcpd_msgs::msg::float__3& _values);

            /*!
             * @brief This function moves the value in member values
             * @param _values New value to be moved in member values
             */
            eProsima_user_DllExport void values(
                    pcpd_msgs::msg::float__3&& _values);

            /*!
             * @brief This function returns a constant reference to member values
             * @return Constant reference to member values
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__3& values() const;

            /*!
             * @brief This function returns a reference to member values
             * @return Reference to member values
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__3& values();
            /*!
             * @brief This function sets a value in member temperature
             * @param _temperature New value for member temperature
             */
            eProsima_user_DllExport void temperature(
                    float _temperature);

            /*!
             * @brief This function returns the value of member temperature
             * @return Value of member temperature
             */
            eProsima_user_DllExport float temperature() const;

            /*!
             * @brief This function returns a reference to member temperature
             * @return Reference to member temperature
             */
            eProsima_user_DllExport float& temperature();

            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2ImuAccel& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            uint64_t m_vinyl_hup_ticks;
            uint64_t m_soc_ticks;
            pcpd_msgs::msg::float__3 m_values;
            float m_temperature;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure Hololens2ImuGyro defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2ImuGyro
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2ImuGyro();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2ImuGyro();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuGyro that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuGyro(
                    const Hololens2ImuGyro& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuGyro that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuGyro(
                    Hololens2ImuGyro&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuGyro that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuGyro& operator =(
                    const Hololens2ImuGyro& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuGyro that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuGyro& operator =(
                    Hololens2ImuGyro&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2ImuGyro object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2ImuGyro& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2ImuGyro object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2ImuGyro& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member vinyl_hup_ticks
             * @param _vinyl_hup_ticks New value for member vinyl_hup_ticks
             */
            eProsima_user_DllExport void vinyl_hup_ticks(
                    uint64_t _vinyl_hup_ticks);

            /*!
             * @brief This function returns the value of member vinyl_hup_ticks
             * @return Value of member vinyl_hup_ticks
             */
            eProsima_user_DllExport uint64_t vinyl_hup_ticks() const;

            /*!
             * @brief This function returns a reference to member vinyl_hup_ticks
             * @return Reference to member vinyl_hup_ticks
             */
            eProsima_user_DllExport uint64_t& vinyl_hup_ticks();

            /*!
             * @brief This function sets a value in member soc_ticks
             * @param _soc_ticks New value for member soc_ticks
             */
            eProsima_user_DllExport void soc_ticks(
                    uint64_t _soc_ticks);

            /*!
             * @brief This function returns the value of member soc_ticks
             * @return Value of member soc_ticks
             */
            eProsima_user_DllExport uint64_t soc_ticks() const;

            /*!
             * @brief This function returns a reference to member soc_ticks
             * @return Reference to member soc_ticks
             */
            eProsima_user_DllExport uint64_t& soc_ticks();

            /*!
             * @brief This function copies the value in member values
             * @param _values New value to be copied in member values
             */
            eProsima_user_DllExport void values(
                    const pcpd_msgs::msg::float__3& _values);

            /*!
             * @brief This function moves the value in member values
             * @param _values New value to be moved in member values
             */
            eProsima_user_DllExport void values(
                    pcpd_msgs::msg::float__3&& _values);

            /*!
             * @brief This function returns a constant reference to member values
             * @return Constant reference to member values
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__3& values() const;

            /*!
             * @brief This function returns a reference to member values
             * @return Reference to member values
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__3& values();
            /*!
             * @brief This function sets a value in member temperature
             * @param _temperature New value for member temperature
             */
            eProsima_user_DllExport void temperature(
                    float _temperature);

            /*!
             * @brief This function returns the value of member temperature
             * @return Value of member temperature
             */
            eProsima_user_DllExport float temperature() const;

            /*!
             * @brief This function returns a reference to member temperature
             * @return Reference to member temperature
             */
            eProsima_user_DllExport float& temperature();

            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2ImuGyro& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            uint64_t m_vinyl_hup_ticks;
            uint64_t m_soc_ticks;
            pcpd_msgs::msg::float__3 m_values;
            float m_temperature;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure Hololens2ImuMag defined by the user in the IDL file.
         * @ingroup HOLOLENS2SENSORS
         */
        class Hololens2ImuMag
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2ImuMag();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2ImuMag();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuMag that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuMag(
                    const Hololens2ImuMag& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuMag that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuMag(
                    Hololens2ImuMag&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuMag that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuMag& operator =(
                    const Hololens2ImuMag& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2ImuMag that will be copied.
             */
            eProsima_user_DllExport Hololens2ImuMag& operator =(
                    Hololens2ImuMag&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2ImuMag object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2ImuMag& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2ImuMag object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2ImuMag& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member vinyl_hup_ticks
             * @param _vinyl_hup_ticks New value for member vinyl_hup_ticks
             */
            eProsima_user_DllExport void vinyl_hup_ticks(
                    uint64_t _vinyl_hup_ticks);

            /*!
             * @brief This function returns the value of member vinyl_hup_ticks
             * @return Value of member vinyl_hup_ticks
             */
            eProsima_user_DllExport uint64_t vinyl_hup_ticks() const;

            /*!
             * @brief This function returns a reference to member vinyl_hup_ticks
             * @return Reference to member vinyl_hup_ticks
             */
            eProsima_user_DllExport uint64_t& vinyl_hup_ticks();

            /*!
             * @brief This function sets a value in member soc_ticks
             * @param _soc_ticks New value for member soc_ticks
             */
            eProsima_user_DllExport void soc_ticks(
                    uint64_t _soc_ticks);

            /*!
             * @brief This function returns the value of member soc_ticks
             * @return Value of member soc_ticks
             */
            eProsima_user_DllExport uint64_t soc_ticks() const;

            /*!
             * @brief This function returns a reference to member soc_ticks
             * @return Reference to member soc_ticks
             */
            eProsima_user_DllExport uint64_t& soc_ticks();

            /*!
             * @brief This function copies the value in member values
             * @param _values New value to be copied in member values
             */
            eProsima_user_DllExport void values(
                    const pcpd_msgs::msg::float__3& _values);

            /*!
             * @brief This function moves the value in member values
             * @param _values New value to be moved in member values
             */
            eProsima_user_DllExport void values(
                    pcpd_msgs::msg::float__3&& _values);

            /*!
             * @brief This function returns a constant reference to member values
             * @return Constant reference to member values
             */
            eProsima_user_DllExport const pcpd_msgs::msg::float__3& values() const;

            /*!
             * @brief This function returns a reference to member values
             * @return Reference to member values
             */
            eProsima_user_DllExport pcpd_msgs::msg::float__3& values();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2ImuMag& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            uint64_t m_vinyl_hup_ticks;
            uint64_t m_soc_ticks;
            pcpd_msgs::msg::float__3 m_values;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
    } // namespace msg
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2SENSORS_H_