// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Hololens2HandTracking.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2HANDTRACKING_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2HANDTRACKING_H_

#include "geometry_msgs/msg/Vector3.h"
#include "pcpd_msgs/msg/Types.h"
#include "geometry_msgs/msg/Quaternion.h"
#include "std_msgs/msg/Header.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Hololens2HandTracking_SOURCE)
#define Hololens2HandTracking_DllAPI __declspec( dllexport )
#else
#define Hololens2HandTracking_DllAPI __declspec( dllimport )
#endif // Hololens2HandTracking_SOURCE
#else
#define Hololens2HandTracking_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Hololens2HandTracking_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace msg {
        /*!
         * @brief This class represents the enumeration Hololens2JointPoseAccuracy defined by the user in the IDL file.
         * @ingroup HOLOLENS2HANDTRACKING
         */
        enum Hololens2JointPoseAccuracy : uint32_t
        {
            High,
            Approximate
        };
        /*!
         * @brief This class represents the structure Hololens2HandJointPose defined by the user in the IDL file.
         * @ingroup HOLOLENS2HANDTRACKING
         */
        class Hololens2HandJointPose
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2HandJointPose();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2HandJointPose();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandJointPose that will be copied.
             */
            eProsima_user_DllExport Hololens2HandJointPose(
                    const Hololens2HandJointPose& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandJointPose that will be copied.
             */
            eProsima_user_DllExport Hololens2HandJointPose(
                    Hololens2HandJointPose&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandJointPose that will be copied.
             */
            eProsima_user_DllExport Hololens2HandJointPose& operator =(
                    const Hololens2HandJointPose& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandJointPose that will be copied.
             */
            eProsima_user_DllExport Hololens2HandJointPose& operator =(
                    Hololens2HandJointPose&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2HandJointPose object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2HandJointPose& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2HandJointPose object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2HandJointPose& x) const;

            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function sets a value in member radius
             * @param _radius New value for member radius
             */
            eProsima_user_DllExport void radius(
                    float _radius);

            /*!
             * @brief This function returns the value of member radius
             * @return Value of member radius
             */
            eProsima_user_DllExport float radius() const;

            /*!
             * @brief This function returns a reference to member radius
             * @return Reference to member radius
             */
            eProsima_user_DllExport float& radius();

            /*!
             * @brief This function sets a value in member accuracy
             * @param _accuracy New value for member accuracy
             */
            eProsima_user_DllExport void accuracy(
                    pcpd_msgs::msg::Hololens2JointPoseAccuracy _accuracy);

            /*!
             * @brief This function returns the value of member accuracy
             * @return Value of member accuracy
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2JointPoseAccuracy accuracy() const;

            /*!
             * @brief This function returns a reference to member accuracy
             * @return Reference to member accuracy
             */
            eProsima_user_DllExport pcpd_msgs::msg::Hololens2JointPoseAccuracy& accuracy();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2HandJointPose& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Quaternion m_orientation;
            geometry_msgs::msg::Vector3 m_position;
            float m_radius;
            pcpd_msgs::msg::Hololens2JointPoseAccuracy m_accuracy;

        };
        /*!
         * @brief This class represents the structure Hololens2HandTracking defined by the user in the IDL file.
         * @ingroup HOLOLENS2HANDTRACKING
         */
        class Hololens2HandTracking
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Hololens2HandTracking();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Hololens2HandTracking();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2HandTracking(
                    const Hololens2HandTracking& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2HandTracking(
                    Hololens2HandTracking&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2HandTracking& operator =(
                    const Hololens2HandTracking& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::Hololens2HandTracking that will be copied.
             */
            eProsima_user_DllExport Hololens2HandTracking& operator =(
                    Hololens2HandTracking&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2HandTracking object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Hololens2HandTracking& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::Hololens2HandTracking object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Hololens2HandTracking& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member head_position
             * @param _head_position New value to be copied in member head_position
             */
            eProsima_user_DllExport void head_position(
                    const geometry_msgs::msg::Vector3& _head_position);

            /*!
             * @brief This function moves the value in member head_position
             * @param _head_position New value to be moved in member head_position
             */
            eProsima_user_DllExport void head_position(
                    geometry_msgs::msg::Vector3&& _head_position);

            /*!
             * @brief This function returns a constant reference to member head_position
             * @return Constant reference to member head_position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& head_position() const;

            /*!
             * @brief This function returns a reference to member head_position
             * @return Reference to member head_position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& head_position();
            /*!
             * @brief This function copies the value in member head_forward
             * @param _head_forward New value to be copied in member head_forward
             */
            eProsima_user_DllExport void head_forward(
                    const geometry_msgs::msg::Vector3& _head_forward);

            /*!
             * @brief This function moves the value in member head_forward
             * @param _head_forward New value to be moved in member head_forward
             */
            eProsima_user_DllExport void head_forward(
                    geometry_msgs::msg::Vector3&& _head_forward);

            /*!
             * @brief This function returns a constant reference to member head_forward
             * @return Constant reference to member head_forward
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& head_forward() const;

            /*!
             * @brief This function returns a reference to member head_forward
             * @return Reference to member head_forward
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& head_forward();
            /*!
             * @brief This function copies the value in member head_up
             * @param _head_up New value to be copied in member head_up
             */
            eProsima_user_DllExport void head_up(
                    const geometry_msgs::msg::Vector3& _head_up);

            /*!
             * @brief This function moves the value in member head_up
             * @param _head_up New value to be moved in member head_up
             */
            eProsima_user_DllExport void head_up(
                    geometry_msgs::msg::Vector3&& _head_up);

            /*!
             * @brief This function returns a constant reference to member head_up
             * @return Constant reference to member head_up
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& head_up() const;

            /*!
             * @brief This function returns a reference to member head_up
             * @return Reference to member head_up
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& head_up();
            /*!
             * @brief This function copies the value in member gaze_origin
             * @param _gaze_origin New value to be copied in member gaze_origin
             */
            eProsima_user_DllExport void gaze_origin(
                    const geometry_msgs::msg::Vector3& _gaze_origin);

            /*!
             * @brief This function moves the value in member gaze_origin
             * @param _gaze_origin New value to be moved in member gaze_origin
             */
            eProsima_user_DllExport void gaze_origin(
                    geometry_msgs::msg::Vector3&& _gaze_origin);

            /*!
             * @brief This function returns a constant reference to member gaze_origin
             * @return Constant reference to member gaze_origin
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& gaze_origin() const;

            /*!
             * @brief This function returns a reference to member gaze_origin
             * @return Reference to member gaze_origin
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& gaze_origin();
            /*!
             * @brief This function copies the value in member gaze_direction
             * @param _gaze_direction New value to be copied in member gaze_direction
             */
            eProsima_user_DllExport void gaze_direction(
                    const geometry_msgs::msg::Vector3& _gaze_direction);

            /*!
             * @brief This function moves the value in member gaze_direction
             * @param _gaze_direction New value to be moved in member gaze_direction
             */
            eProsima_user_DllExport void gaze_direction(
                    geometry_msgs::msg::Vector3&& _gaze_direction);

            /*!
             * @brief This function returns a constant reference to member gaze_direction
             * @return Constant reference to member gaze_direction
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& gaze_direction() const;

            /*!
             * @brief This function returns a reference to member gaze_direction
             * @return Reference to member gaze_direction
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& gaze_direction();
            /*!
             * @brief This function copies the value in member left_poses
             * @param _left_poses New value to be copied in member left_poses
             */
            eProsima_user_DllExport void left_poses(
                    const std::vector<pcpd_msgs::msg::Hololens2HandJointPose>& _left_poses);

            /*!
             * @brief This function moves the value in member left_poses
             * @param _left_poses New value to be moved in member left_poses
             */
            eProsima_user_DllExport void left_poses(
                    std::vector<pcpd_msgs::msg::Hololens2HandJointPose>&& _left_poses);

            /*!
             * @brief This function returns a constant reference to member left_poses
             * @return Constant reference to member left_poses
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::msg::Hololens2HandJointPose>& left_poses() const;

            /*!
             * @brief This function returns a reference to member left_poses
             * @return Reference to member left_poses
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::msg::Hololens2HandJointPose>& left_poses();
            /*!
             * @brief This function copies the value in member right_poses
             * @param _right_poses New value to be copied in member right_poses
             */
            eProsima_user_DllExport void right_poses(
                    const std::vector<pcpd_msgs::msg::Hololens2HandJointPose>& _right_poses);

            /*!
             * @brief This function moves the value in member right_poses
             * @param _right_poses New value to be moved in member right_poses
             */
            eProsima_user_DllExport void right_poses(
                    std::vector<pcpd_msgs::msg::Hololens2HandJointPose>&& _right_poses);

            /*!
             * @brief This function returns a constant reference to member right_poses
             * @return Constant reference to member right_poses
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::msg::Hololens2HandJointPose>& right_poses() const;

            /*!
             * @brief This function returns a reference to member right_poses
             * @return Reference to member right_poses
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::msg::Hololens2HandJointPose>& right_poses();
            /*!
             * @brief This function sets a value in member valid
             * @param _valid New value for member valid
             */
            eProsima_user_DllExport void valid(
                    uint8_t _valid);

            /*!
             * @brief This function returns the value of member valid
             * @return Value of member valid
             */
            eProsima_user_DllExport uint8_t valid() const;

            /*!
             * @brief This function returns a reference to member valid
             * @return Reference to member valid
             */
            eProsima_user_DllExport uint8_t& valid();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::Hololens2HandTracking& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            geometry_msgs::msg::Vector3 m_head_position;
            geometry_msgs::msg::Vector3 m_head_forward;
            geometry_msgs::msg::Vector3 m_head_up;
            geometry_msgs::msg::Vector3 m_gaze_origin;
            geometry_msgs::msg::Vector3 m_gaze_direction;
            std::vector<pcpd_msgs::msg::Hololens2HandJointPose> m_left_poses;
            std::vector<pcpd_msgs::msg::Hololens2HandJointPose> m_right_poses;
            uint8_t m_valid;

        };
    } // namespace msg
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_MSG_HOLOLENS2HANDTRACKING_H_