// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataflowBufferInfo.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_MSG_DATAFLOWBUFFERINFO_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_MSG_DATAFLOWBUFFERINFO_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataflowBufferInfo_SOURCE)
#define DataflowBufferInfo_DllAPI __declspec( dllexport )
#else
#define DataflowBufferInfo_DllAPI __declspec( dllimport )
#endif // DataflowBufferInfo_SOURCE
#else
#define DataflowBufferInfo_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataflowBufferInfo_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure BufferInfoPropertyUserData defined by the user in the IDL file.
         * @ingroup DATAFLOWBUFFERINFO
         */
        class BufferInfoPropertyUserData
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BufferInfoPropertyUserData();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BufferInfoPropertyUserData();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoPropertyUserData that will be copied.
             */
            eProsima_user_DllExport BufferInfoPropertyUserData(
                    const BufferInfoPropertyUserData& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoPropertyUserData that will be copied.
             */
            eProsima_user_DllExport BufferInfoPropertyUserData(
                    BufferInfoPropertyUserData&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoPropertyUserData that will be copied.
             */
            eProsima_user_DllExport BufferInfoPropertyUserData& operator =(
                    const BufferInfoPropertyUserData& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoPropertyUserData that will be copied.
             */
            eProsima_user_DllExport BufferInfoPropertyUserData& operator =(
                    BufferInfoPropertyUserData&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::BufferInfoPropertyUserData object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const BufferInfoPropertyUserData& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::BufferInfoPropertyUserData object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const BufferInfoPropertyUserData& x) const;

            /*!
             * @brief This function copies the value in member key
             * @param _key New value to be copied in member key
             */
            eProsima_user_DllExport void key(
                    const std::string& _key);

            /*!
             * @brief This function moves the value in member key
             * @param _key New value to be moved in member key
             */
            eProsima_user_DllExport void key(
                    std::string&& _key);

            /*!
             * @brief This function returns a constant reference to member key
             * @return Constant reference to member key
             */
            eProsima_user_DllExport const std::string& key() const;

            /*!
             * @brief This function returns a reference to member key
             * @return Reference to member key
             */
            eProsima_user_DllExport std::string& key();
            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            eProsima_user_DllExport void value(
                    const std::vector<uint8_t>& _value);

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            eProsima_user_DllExport void value(
                    std::vector<uint8_t>&& _value);

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            eProsima_user_DllExport const std::vector<uint8_t>& value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport std::vector<uint8_t>& value();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::BufferInfoPropertyUserData& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_key;
            std::vector<uint8_t> m_value;

        };
        /*!
         * @brief This class represents the structure BufferInfoProperty defined by the user in the IDL file.
         * @ingroup DATAFLOWBUFFERINFO
         */
        class BufferInfoProperty
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BufferInfoProperty();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BufferInfoProperty();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoProperty that will be copied.
             */
            eProsima_user_DllExport BufferInfoProperty(
                    const BufferInfoProperty& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoProperty that will be copied.
             */
            eProsima_user_DllExport BufferInfoProperty(
                    BufferInfoProperty&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoProperty that will be copied.
             */
            eProsima_user_DllExport BufferInfoProperty& operator =(
                    const BufferInfoProperty& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfoProperty that will be copied.
             */
            eProsima_user_DllExport BufferInfoProperty& operator =(
                    BufferInfoProperty&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::BufferInfoProperty object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const BufferInfoProperty& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::BufferInfoProperty object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const BufferInfoProperty& x) const;

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int32_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int32_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int32_t& value();

            /*!
             * @brief This function copies the value in member user_data
             * @param _user_data New value to be copied in member user_data
             */
            eProsima_user_DllExport void user_data(
                    const std::vector<pcpd_msgs::msg::BufferInfoPropertyUserData>& _user_data);

            /*!
             * @brief This function moves the value in member user_data
             * @param _user_data New value to be moved in member user_data
             */
            eProsima_user_DllExport void user_data(
                    std::vector<pcpd_msgs::msg::BufferInfoPropertyUserData>&& _user_data);

            /*!
             * @brief This function returns a constant reference to member user_data
             * @return Constant reference to member user_data
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::msg::BufferInfoPropertyUserData>& user_data() const;

            /*!
             * @brief This function returns a reference to member user_data
             * @return Reference to member user_data
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::msg::BufferInfoPropertyUserData>& user_data();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::BufferInfoProperty& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            int32_t m_value;
            std::vector<pcpd_msgs::msg::BufferInfoPropertyUserData> m_user_data;

        };
        /*!
         * @brief This class represents the structure BufferInfo defined by the user in the IDL file.
         * @ingroup DATAFLOWBUFFERINFO
         */
        class BufferInfo
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BufferInfo();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BufferInfo();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfo that will be copied.
             */
            eProsima_user_DllExport BufferInfo(
                    const BufferInfo& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfo that will be copied.
             */
            eProsima_user_DllExport BufferInfo(
                    BufferInfo&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfo that will be copied.
             */
            eProsima_user_DllExport BufferInfo& operator =(
                    const BufferInfo& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::msg::BufferInfo that will be copied.
             */
            eProsima_user_DllExport BufferInfo& operator =(
                    BufferInfo&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::BufferInfo object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const BufferInfo& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::msg::BufferInfo object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const BufferInfo& x) const;

            /*!
             * @brief This function sets a value in member frame_size
             * @param _frame_size New value for member frame_size
             */
            eProsima_user_DllExport void frame_size(
                    uint64_t _frame_size);

            /*!
             * @brief This function returns the value of member frame_size
             * @return Value of member frame_size
             */
            eProsima_user_DllExport uint64_t frame_size() const;

            /*!
             * @brief This function returns a reference to member frame_size
             * @return Reference to member frame_size
             */
            eProsima_user_DllExport uint64_t& frame_size();

            /*!
             * @brief This function sets a value in member width
             * @param _width New value for member width
             */
            eProsima_user_DllExport void width(
                    uint32_t _width);

            /*!
             * @brief This function returns the value of member width
             * @return Value of member width
             */
            eProsima_user_DllExport uint32_t width() const;

            /*!
             * @brief This function returns a reference to member width
             * @return Reference to member width
             */
            eProsima_user_DllExport uint32_t& width();

            /*!
             * @brief This function sets a value in member height
             * @param _height New value for member height
             */
            eProsima_user_DllExport void height(
                    uint32_t _height);

            /*!
             * @brief This function returns the value of member height
             * @return Value of member height
             */
            eProsima_user_DllExport uint32_t height() const;

            /*!
             * @brief This function returns a reference to member height
             * @return Reference to member height
             */
            eProsima_user_DllExport uint32_t& height();

            /*!
             * @brief This function sets a value in member bits_per_element
             * @param _bits_per_element New value for member bits_per_element
             */
            eProsima_user_DllExport void bits_per_element(
                    uint32_t _bits_per_element);

            /*!
             * @brief This function returns the value of member bits_per_element
             * @return Value of member bits_per_element
             */
            eProsima_user_DllExport uint32_t bits_per_element() const;

            /*!
             * @brief This function returns a reference to member bits_per_element
             * @return Reference to member bits_per_element
             */
            eProsima_user_DllExport uint32_t& bits_per_element();

            /*!
             * @brief This function sets a value in member stride
             * @param _stride New value for member stride
             */
            eProsima_user_DllExport void stride(
                    uint32_t _stride);

            /*!
             * @brief This function returns the value of member stride
             * @return Value of member stride
             */
            eProsima_user_DllExport uint32_t stride() const;

            /*!
             * @brief This function returns a reference to member stride
             * @return Reference to member stride
             */
            eProsima_user_DllExport uint32_t& stride();

            /*!
             * @brief This function copies the value in member properties
             * @param _properties New value to be copied in member properties
             */
            eProsima_user_DllExport void properties(
                    const std::vector<pcpd_msgs::msg::BufferInfoProperty>& _properties);

            /*!
             * @brief This function moves the value in member properties
             * @param _properties New value to be moved in member properties
             */
            eProsima_user_DllExport void properties(
                    std::vector<pcpd_msgs::msg::BufferInfoProperty>&& _properties);

            /*!
             * @brief This function returns a constant reference to member properties
             * @return Constant reference to member properties
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::msg::BufferInfoProperty>& properties() const;

            /*!
             * @brief This function returns a reference to member properties
             * @return Reference to member properties
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::msg::BufferInfoProperty>& properties();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::msg::BufferInfo& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint64_t m_frame_size;
            uint32_t m_width;
            uint32_t m_height;
            uint32_t m_bits_per_element;
            uint32_t m_stride;
            std::vector<pcpd_msgs::msg::BufferInfoProperty> m_properties;

        };
    } // namespace msg
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_MSG_DATAFLOWBUFFERINFO_H_