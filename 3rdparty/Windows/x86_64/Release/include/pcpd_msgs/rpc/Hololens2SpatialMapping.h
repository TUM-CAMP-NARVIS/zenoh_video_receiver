// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Hololens2SpatialMapping.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_RPC_HOLOLENS2SPATIALMAPPING_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_RPC_HOLOLENS2SPATIALMAPPING_H_

#include "pcpd_msgs/rpc/Types.h"
#include "geometry_msgs/msg/Vector3.h"
#include "geometry_msgs/msg/Quaternion.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Hololens2SpatialMapping_SOURCE)
#define Hololens2SpatialMapping_DllAPI __declspec( dllexport )
#else
#define Hololens2SpatialMapping_DllAPI __declspec( dllimport )
#endif // Hololens2SpatialMapping_SOURCE
#else
#define Hololens2SpatialMapping_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Hololens2SpatialMapping_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace rpc {
        /*!
         * @brief This class represents the enumeration HL2SpatialMapping_VolumeType defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        enum HL2SpatialMapping_VolumeType : uint32_t
        {
            SM_VT_BOX,
            SM_VT_FRUSTUM,
            SM_VT_ORIENTED_BOX,
            SM_VT_SPHERE
        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_Plane defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_Plane
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_Plane();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_Plane();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Plane that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Plane(
                    const HL2SpatialMapping_Plane& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Plane that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Plane(
                    HL2SpatialMapping_Plane&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Plane that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Plane& operator =(
                    const HL2SpatialMapping_Plane& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Plane that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Plane& operator =(
                    HL2SpatialMapping_Plane&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Plane object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_Plane& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Plane object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_Plane& x) const;

            /*!
             * @brief This function copies the value in member normal
             * @param _normal New value to be copied in member normal
             */
            eProsima_user_DllExport void normal(
                    const geometry_msgs::msg::Vector3& _normal);

            /*!
             * @brief This function moves the value in member normal
             * @param _normal New value to be moved in member normal
             */
            eProsima_user_DllExport void normal(
                    geometry_msgs::msg::Vector3&& _normal);

            /*!
             * @brief This function returns a constant reference to member normal
             * @return Constant reference to member normal
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& normal() const;

            /*!
             * @brief This function returns a reference to member normal
             * @return Reference to member normal
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& normal();
            /*!
             * @brief This function sets a value in member d
             * @param _d New value for member d
             */
            eProsima_user_DllExport void d(
                    float _d);

            /*!
             * @brief This function returns the value of member d
             * @return Value of member d
             */
            eProsima_user_DllExport float d() const;

            /*!
             * @brief This function returns a reference to member d
             * @return Reference to member d
             */
            eProsima_user_DllExport float& d();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Vector3 m_normal;
            float m_d;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_SurfaceInfo defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_SurfaceInfo
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_SurfaceInfo();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_SurfaceInfo();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_SurfaceInfo(
                    const HL2SpatialMapping_SurfaceInfo& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_SurfaceInfo(
                    HL2SpatialMapping_SurfaceInfo&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_SurfaceInfo& operator =(
                    const HL2SpatialMapping_SurfaceInfo& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_SurfaceInfo& operator =(
                    HL2SpatialMapping_SurfaceInfo&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_SurfaceInfo& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_SurfaceInfo& x) const;

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            eProsima_user_DllExport void id(
                    const pcpd_msgs::rpc::HL2Guid& _id);

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            eProsima_user_DllExport void id(
                    pcpd_msgs::rpc::HL2Guid&& _id);

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2Guid& id() const;

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2Guid& id();
            /*!
             * @brief This function sets a value in member update_time
             * @param _update_time New value for member update_time
             */
            eProsima_user_DllExport void update_time(
                    int64_t _update_time);

            /*!
             * @brief This function returns the value of member update_time
             * @return Value of member update_time
             */
            eProsima_user_DllExport int64_t update_time() const;

            /*!
             * @brief This function returns a reference to member update_time
             * @return Reference to member update_time
             */
            eProsima_user_DllExport int64_t& update_time();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2Guid m_id;
            int64_t m_update_time;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_BoundingBox defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_BoundingBox
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_BoundingBox();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_BoundingBox();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_BoundingBox(
                    const HL2SpatialMapping_BoundingBox& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_BoundingBox(
                    HL2SpatialMapping_BoundingBox&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_BoundingBox& operator =(
                    const HL2SpatialMapping_BoundingBox& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_BoundingBox& operator =(
                    HL2SpatialMapping_BoundingBox&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_BoundingBox& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_BoundingBox& x) const;

            /*!
             * @brief This function copies the value in member center
             * @param _center New value to be copied in member center
             */
            eProsima_user_DllExport void center(
                    const geometry_msgs::msg::Vector3& _center);

            /*!
             * @brief This function moves the value in member center
             * @param _center New value to be moved in member center
             */
            eProsima_user_DllExport void center(
                    geometry_msgs::msg::Vector3&& _center);

            /*!
             * @brief This function returns a constant reference to member center
             * @return Constant reference to member center
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& center() const;

            /*!
             * @brief This function returns a reference to member center
             * @return Reference to member center
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& center();
            /*!
             * @brief This function copies the value in member extents
             * @param _extents New value to be copied in member extents
             */
            eProsima_user_DllExport void extents(
                    const geometry_msgs::msg::Vector3& _extents);

            /*!
             * @brief This function moves the value in member extents
             * @param _extents New value to be moved in member extents
             */
            eProsima_user_DllExport void extents(
                    geometry_msgs::msg::Vector3&& _extents);

            /*!
             * @brief This function returns a constant reference to member extents
             * @return Constant reference to member extents
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& extents() const;

            /*!
             * @brief This function returns a reference to member extents
             * @return Reference to member extents
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& extents();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Vector3 m_center;
            geometry_msgs::msg::Vector3 m_extents;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_Frustum defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_Frustum
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_Frustum();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_Frustum();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Frustum that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Frustum(
                    const HL2SpatialMapping_Frustum& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Frustum that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Frustum(
                    HL2SpatialMapping_Frustum&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Frustum that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Frustum& operator =(
                    const HL2SpatialMapping_Frustum& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Frustum that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Frustum& operator =(
                    HL2SpatialMapping_Frustum&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Frustum object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_Frustum& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Frustum object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_Frustum& x) const;

            /*!
             * @brief This function copies the value in member plane_near
             * @param _plane_near New value to be copied in member plane_near
             */
            eProsima_user_DllExport void plane_near(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& _plane_near);

            /*!
             * @brief This function moves the value in member plane_near
             * @param _plane_near New value to be moved in member plane_near
             */
            eProsima_user_DllExport void plane_near(
                    pcpd_msgs::rpc::HL2SpatialMapping_Plane&& _plane_near);

            /*!
             * @brief This function returns a constant reference to member plane_near
             * @return Constant reference to member plane_near
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_near() const;

            /*!
             * @brief This function returns a reference to member plane_near
             * @return Reference to member plane_near
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_near();
            /*!
             * @brief This function copies the value in member plane_far
             * @param _plane_far New value to be copied in member plane_far
             */
            eProsima_user_DllExport void plane_far(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& _plane_far);

            /*!
             * @brief This function moves the value in member plane_far
             * @param _plane_far New value to be moved in member plane_far
             */
            eProsima_user_DllExport void plane_far(
                    pcpd_msgs::rpc::HL2SpatialMapping_Plane&& _plane_far);

            /*!
             * @brief This function returns a constant reference to member plane_far
             * @return Constant reference to member plane_far
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_far() const;

            /*!
             * @brief This function returns a reference to member plane_far
             * @return Reference to member plane_far
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_far();
            /*!
             * @brief This function copies the value in member plane_right
             * @param _plane_right New value to be copied in member plane_right
             */
            eProsima_user_DllExport void plane_right(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& _plane_right);

            /*!
             * @brief This function moves the value in member plane_right
             * @param _plane_right New value to be moved in member plane_right
             */
            eProsima_user_DllExport void plane_right(
                    pcpd_msgs::rpc::HL2SpatialMapping_Plane&& _plane_right);

            /*!
             * @brief This function returns a constant reference to member plane_right
             * @return Constant reference to member plane_right
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_right() const;

            /*!
             * @brief This function returns a reference to member plane_right
             * @return Reference to member plane_right
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_right();
            /*!
             * @brief This function copies the value in member plane_left
             * @param _plane_left New value to be copied in member plane_left
             */
            eProsima_user_DllExport void plane_left(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& _plane_left);

            /*!
             * @brief This function moves the value in member plane_left
             * @param _plane_left New value to be moved in member plane_left
             */
            eProsima_user_DllExport void plane_left(
                    pcpd_msgs::rpc::HL2SpatialMapping_Plane&& _plane_left);

            /*!
             * @brief This function returns a constant reference to member plane_left
             * @return Constant reference to member plane_left
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_left() const;

            /*!
             * @brief This function returns a reference to member plane_left
             * @return Reference to member plane_left
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_left();
            /*!
             * @brief This function copies the value in member plane_top
             * @param _plane_top New value to be copied in member plane_top
             */
            eProsima_user_DllExport void plane_top(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& _plane_top);

            /*!
             * @brief This function moves the value in member plane_top
             * @param _plane_top New value to be moved in member plane_top
             */
            eProsima_user_DllExport void plane_top(
                    pcpd_msgs::rpc::HL2SpatialMapping_Plane&& _plane_top);

            /*!
             * @brief This function returns a constant reference to member plane_top
             * @return Constant reference to member plane_top
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_top() const;

            /*!
             * @brief This function returns a reference to member plane_top
             * @return Reference to member plane_top
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_top();
            /*!
             * @brief This function copies the value in member plane_bottom
             * @param _plane_bottom New value to be copied in member plane_bottom
             */
            eProsima_user_DllExport void plane_bottom(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Plane& _plane_bottom);

            /*!
             * @brief This function moves the value in member plane_bottom
             * @param _plane_bottom New value to be moved in member plane_bottom
             */
            eProsima_user_DllExport void plane_bottom(
                    pcpd_msgs::rpc::HL2SpatialMapping_Plane&& _plane_bottom);

            /*!
             * @brief This function returns a constant reference to member plane_bottom
             * @return Constant reference to member plane_bottom
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_bottom() const;

            /*!
             * @brief This function returns a reference to member plane_bottom
             * @return Reference to member plane_bottom
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Plane& plane_bottom();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Frustum& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2SpatialMapping_Plane m_plane_near;
            pcpd_msgs::rpc::HL2SpatialMapping_Plane m_plane_far;
            pcpd_msgs::rpc::HL2SpatialMapping_Plane m_plane_right;
            pcpd_msgs::rpc::HL2SpatialMapping_Plane m_plane_left;
            pcpd_msgs::rpc::HL2SpatialMapping_Plane m_plane_top;
            pcpd_msgs::rpc::HL2SpatialMapping_Plane m_plane_bottom;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_OrientedBox defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_OrientedBox
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_OrientedBox();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_OrientedBox();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_OrientedBox(
                    const HL2SpatialMapping_OrientedBox& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_OrientedBox(
                    HL2SpatialMapping_OrientedBox&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_OrientedBox& operator =(
                    const HL2SpatialMapping_OrientedBox& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_OrientedBox& operator =(
                    HL2SpatialMapping_OrientedBox&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_OrientedBox& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_OrientedBox& x) const;

            /*!
             * @brief This function copies the value in member center
             * @param _center New value to be copied in member center
             */
            eProsima_user_DllExport void center(
                    const geometry_msgs::msg::Vector3& _center);

            /*!
             * @brief This function moves the value in member center
             * @param _center New value to be moved in member center
             */
            eProsima_user_DllExport void center(
                    geometry_msgs::msg::Vector3&& _center);

            /*!
             * @brief This function returns a constant reference to member center
             * @return Constant reference to member center
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& center() const;

            /*!
             * @brief This function returns a reference to member center
             * @return Reference to member center
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& center();
            /*!
             * @brief This function copies the value in member extents
             * @param _extents New value to be copied in member extents
             */
            eProsima_user_DllExport void extents(
                    const geometry_msgs::msg::Vector3& _extents);

            /*!
             * @brief This function moves the value in member extents
             * @param _extents New value to be moved in member extents
             */
            eProsima_user_DllExport void extents(
                    geometry_msgs::msg::Vector3&& _extents);

            /*!
             * @brief This function returns a constant reference to member extents
             * @return Constant reference to member extents
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& extents() const;

            /*!
             * @brief This function returns a reference to member extents
             * @return Reference to member extents
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& extents();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Vector3 m_center;
            geometry_msgs::msg::Vector3 m_extents;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_Sphere defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_Sphere
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_Sphere();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_Sphere();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Sphere that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Sphere(
                    const HL2SpatialMapping_Sphere& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Sphere that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Sphere(
                    HL2SpatialMapping_Sphere&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Sphere that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Sphere& operator =(
                    const HL2SpatialMapping_Sphere& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Sphere that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Sphere& operator =(
                    HL2SpatialMapping_Sphere&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Sphere object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_Sphere& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Sphere object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_Sphere& x) const;

            /*!
             * @brief This function copies the value in member center
             * @param _center New value to be copied in member center
             */
            eProsima_user_DllExport void center(
                    const geometry_msgs::msg::Vector3& _center);

            /*!
             * @brief This function moves the value in member center
             * @param _center New value to be moved in member center
             */
            eProsima_user_DllExport void center(
                    geometry_msgs::msg::Vector3&& _center);

            /*!
             * @brief This function returns a constant reference to member center
             * @return Constant reference to member center
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& center() const;

            /*!
             * @brief This function returns a reference to member center
             * @return Reference to member center
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& center();
            /*!
             * @brief This function sets a value in member radius
             * @param _radius New value for member radius
             */
            eProsima_user_DllExport void radius(
                    float _radius);

            /*!
             * @brief This function returns the value of member radius
             * @return Value of member radius
             */
            eProsima_user_DllExport float radius() const;

            /*!
             * @brief This function returns a reference to member radius
             * @return Reference to member radius
             */
            eProsima_user_DllExport float& radius();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Sphere& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Vector3 m_center;
            float m_radius;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_MeshDescription defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_MeshDescription
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshDescription();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_MeshDescription();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshDescription(
                    const HL2SpatialMapping_MeshDescription& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshDescription(
                    HL2SpatialMapping_MeshDescription&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshDescription& operator =(
                    const HL2SpatialMapping_MeshDescription& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshDescription& operator =(
                    HL2SpatialMapping_MeshDescription&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_MeshDescription& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_MeshDescription& x) const;

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            eProsima_user_DllExport void id(
                    const pcpd_msgs::rpc::HL2Guid& _id);

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            eProsima_user_DllExport void id(
                    pcpd_msgs::rpc::HL2Guid&& _id);

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2Guid& id() const;

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2Guid& id();
            /*!
             * @brief This function sets a value in member maxtpcm
             * @param _maxtpcm New value for member maxtpcm
             */
            eProsima_user_DllExport void maxtpcm(
                    double _maxtpcm);

            /*!
             * @brief This function returns the value of member maxtpcm
             * @return Value of member maxtpcm
             */
            eProsima_user_DllExport double maxtpcm() const;

            /*!
             * @brief This function returns a reference to member maxtpcm
             * @return Reference to member maxtpcm
             */
            eProsima_user_DllExport double& maxtpcm();

            /*!
             * @brief This function sets a value in member vertex_format
             * @param _vertex_format New value for member vertex_format
             */
            eProsima_user_DllExport void vertex_format(
                    uint32_t _vertex_format);

            /*!
             * @brief This function returns the value of member vertex_format
             * @return Value of member vertex_format
             */
            eProsima_user_DllExport uint32_t vertex_format() const;

            /*!
             * @brief This function returns a reference to member vertex_format
             * @return Reference to member vertex_format
             */
            eProsima_user_DllExport uint32_t& vertex_format();

            /*!
             * @brief This function sets a value in member triangle_format
             * @param _triangle_format New value for member triangle_format
             */
            eProsima_user_DllExport void triangle_format(
                    uint32_t _triangle_format);

            /*!
             * @brief This function returns the value of member triangle_format
             * @return Value of member triangle_format
             */
            eProsima_user_DllExport uint32_t triangle_format() const;

            /*!
             * @brief This function returns a reference to member triangle_format
             * @return Reference to member triangle_format
             */
            eProsima_user_DllExport uint32_t& triangle_format();

            /*!
             * @brief This function sets a value in member normal_format
             * @param _normal_format New value for member normal_format
             */
            eProsima_user_DllExport void normal_format(
                    uint32_t _normal_format);

            /*!
             * @brief This function returns the value of member normal_format
             * @return Value of member normal_format
             */
            eProsima_user_DllExport uint32_t normal_format() const;

            /*!
             * @brief This function returns a reference to member normal_format
             * @return Reference to member normal_format
             */
            eProsima_user_DllExport uint32_t& normal_format();

            /*!
             * @brief This function sets a value in member flags
             * @param _flags New value for member flags
             */
            eProsima_user_DllExport void flags(
                    uint32_t _flags);

            /*!
             * @brief This function returns the value of member flags
             * @return Value of member flags
             */
            eProsima_user_DllExport uint32_t flags() const;

            /*!
             * @brief This function returns a reference to member flags
             * @return Reference to member flags
             */
            eProsima_user_DllExport uint32_t& flags();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2Guid m_id;
            double m_maxtpcm;
            uint32_t m_vertex_format;
            uint32_t m_triangle_format;
            uint32_t m_normal_format;
            uint32_t m_flags;

        };
        /*!
         * @brief This class represents the structure HL2SpatialMapping_MeshInfo defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_MeshInfo
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshInfo();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_MeshInfo();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshInfo(
                    const HL2SpatialMapping_MeshInfo& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshInfo(
                    HL2SpatialMapping_MeshInfo&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshInfo& operator =(
                    const HL2SpatialMapping_MeshInfo& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_MeshInfo& operator =(
                    HL2SpatialMapping_MeshInfo&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_MeshInfo& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_MeshInfo& x) const;

            /*!
             * @brief This function sets a value in member index
             * @param _index New value for member index
             */
            eProsima_user_DllExport void index(
                    uint32_t _index);

            /*!
             * @brief This function returns the value of member index
             * @return Value of member index
             */
            eProsima_user_DllExport uint32_t index() const;

            /*!
             * @brief This function returns a reference to member index
             * @return Reference to member index
             */
            eProsima_user_DllExport uint32_t& index();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    uint32_t _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport uint32_t status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport uint32_t& status();

            /*!
             * @brief This function sets a value in member vpl
             * @param _vpl New value for member vpl
             */
            eProsima_user_DllExport void vpl(
                    uint32_t _vpl);

            /*!
             * @brief This function returns the value of member vpl
             * @return Value of member vpl
             */
            eProsima_user_DllExport uint32_t vpl() const;

            /*!
             * @brief This function returns a reference to member vpl
             * @return Reference to member vpl
             */
            eProsima_user_DllExport uint32_t& vpl();

            /*!
             * @brief This function sets a value in member til
             * @param _til New value for member til
             */
            eProsima_user_DllExport void til(
                    uint32_t _til);

            /*!
             * @brief This function returns the value of member til
             * @return Value of member til
             */
            eProsima_user_DllExport uint32_t til() const;

            /*!
             * @brief This function returns a reference to member til
             * @return Reference to member til
             */
            eProsima_user_DllExport uint32_t& til();

            /*!
             * @brief This function sets a value in member vnl
             * @param _vnl New value for member vnl
             */
            eProsima_user_DllExport void vnl(
                    uint32_t _vnl);

            /*!
             * @brief This function returns the value of member vnl
             * @return Value of member vnl
             */
            eProsima_user_DllExport uint32_t vnl() const;

            /*!
             * @brief This function returns a reference to member vnl
             * @return Reference to member vnl
             */
            eProsima_user_DllExport uint32_t& vnl();

            /*!
             * @brief This function copies the value in member scale
             * @param _scale New value to be copied in member scale
             */
            eProsima_user_DllExport void scale(
                    const geometry_msgs::msg::Vector3& _scale);

            /*!
             * @brief This function moves the value in member scale
             * @param _scale New value to be moved in member scale
             */
            eProsima_user_DllExport void scale(
                    geometry_msgs::msg::Vector3&& _scale);

            /*!
             * @brief This function returns a constant reference to member scale
             * @return Constant reference to member scale
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& scale() const;

            /*!
             * @brief This function returns a reference to member scale
             * @return Reference to member scale
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& scale();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();
            /*!
             * @brief This function sets a value in member bsz
             * @param _bsz New value for member bsz
             */
            eProsima_user_DllExport void bsz(
                    uint32_t _bsz);

            /*!
             * @brief This function returns the value of member bsz
             * @return Value of member bsz
             */
            eProsima_user_DllExport uint32_t bsz() const;

            /*!
             * @brief This function returns a reference to member bsz
             * @return Reference to member bsz
             */
            eProsima_user_DllExport uint32_t& bsz();

            /*!
             * @brief This function copies the value in member bounds
             * @param _bounds New value to be copied in member bounds
             */
            eProsima_user_DllExport void bounds(
                    const pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& _bounds);

            /*!
             * @brief This function moves the value in member bounds
             * @param _bounds New value to be moved in member bounds
             */
            eProsima_user_DllExport void bounds(
                    pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox&& _bounds);

            /*!
             * @brief This function returns a constant reference to member bounds
             * @return Constant reference to member bounds
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& bounds() const;

            /*!
             * @brief This function returns a reference to member bounds
             * @return Reference to member bounds
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& bounds();
            /*!
             * @brief This function copies the value in member vpd
             * @param _vpd New value to be copied in member vpd
             */
            eProsima_user_DllExport void vpd(
                    const std::vector<uint8_t>& _vpd);

            /*!
             * @brief This function moves the value in member vpd
             * @param _vpd New value to be moved in member vpd
             */
            eProsima_user_DllExport void vpd(
                    std::vector<uint8_t>&& _vpd);

            /*!
             * @brief This function returns a constant reference to member vpd
             * @return Constant reference to member vpd
             */
            eProsima_user_DllExport const std::vector<uint8_t>& vpd() const;

            /*!
             * @brief This function returns a reference to member vpd
             * @return Reference to member vpd
             */
            eProsima_user_DllExport std::vector<uint8_t>& vpd();
            /*!
             * @brief This function copies the value in member tid
             * @param _tid New value to be copied in member tid
             */
            eProsima_user_DllExport void tid(
                    const std::vector<uint8_t>& _tid);

            /*!
             * @brief This function moves the value in member tid
             * @param _tid New value to be moved in member tid
             */
            eProsima_user_DllExport void tid(
                    std::vector<uint8_t>&& _tid);

            /*!
             * @brief This function returns a constant reference to member tid
             * @return Constant reference to member tid
             */
            eProsima_user_DllExport const std::vector<uint8_t>& tid() const;

            /*!
             * @brief This function returns a reference to member tid
             * @return Reference to member tid
             */
            eProsima_user_DllExport std::vector<uint8_t>& tid();
            /*!
             * @brief This function copies the value in member vnd
             * @param _vnd New value to be copied in member vnd
             */
            eProsima_user_DllExport void vnd(
                    const std::vector<uint8_t>& _vnd);

            /*!
             * @brief This function moves the value in member vnd
             * @param _vnd New value to be moved in member vnd
             */
            eProsima_user_DllExport void vnd(
                    std::vector<uint8_t>&& _vnd);

            /*!
             * @brief This function returns a constant reference to member vnd
             * @return Constant reference to member vnd
             */
            eProsima_user_DllExport const std::vector<uint8_t>& vnd() const;

            /*!
             * @brief This function returns a reference to member vnd
             * @return Reference to member vnd
             */
            eProsima_user_DllExport std::vector<uint8_t>& vnd();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_index;
            uint32_t m_status;
            uint32_t m_vpl;
            uint32_t m_til;
            uint32_t m_vnl;
            geometry_msgs::msg::Vector3 m_scale;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;
            uint32_t m_bsz;
            pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox m_bounds;
            std::vector<uint8_t> m_vpd;
            std::vector<uint8_t> m_tid;
            std::vector<uint8_t> m_vnd;

        };
        /*!
         * @brief This class represents the union HL2SpatialMapping_Volume defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SpatialMapping_Volume
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SpatialMapping_Volume();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SpatialMapping_Volume();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Volume that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Volume(
                    const HL2SpatialMapping_Volume& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Volume that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Volume(
                    HL2SpatialMapping_Volume&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Volume that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Volume& operator =(
                    const HL2SpatialMapping_Volume& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SpatialMapping_Volume that will be copied.
             */
            eProsima_user_DllExport HL2SpatialMapping_Volume& operator =(
                    HL2SpatialMapping_Volume&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Volume object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SpatialMapping_Volume& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SpatialMapping_Volume object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SpatialMapping_Volume& x) const;

            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(
                    pcpd_msgs::rpc::HL2SpatialMapping_VolumeType __d);

            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_VolumeType _d() const;

            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_VolumeType& _d();

            /*!
             * @brief This function copies the value in member bounding_box
             * @param _bounding_box New value to be copied in member bounding_box
             */
            eProsima_user_DllExport void bounding_box(
                    const pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox& _bounding_box);

            /*!
             * @brief This function moves the value in member bounding_box
             * @param _bounding_box New value to be moved in member bounding_box
             */
            eProsima_user_DllExport void bounding_box(
                    pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox&& _bounding_box);

            /*!
             * @brief This function returns a constant reference to member bounding_box
             * @return Constant reference to member bounding_box
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox& bounding_box() const;

            /*!
             * @brief This function returns a reference to member bounding_box
             * @return Reference to member bounding_box
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox& bounding_box();
            /*!
             * @brief This function copies the value in member frustum
             * @param _frustum New value to be copied in member frustum
             */
            eProsima_user_DllExport void frustum(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Frustum& _frustum);

            /*!
             * @brief This function moves the value in member frustum
             * @param _frustum New value to be moved in member frustum
             */
            eProsima_user_DllExport void frustum(
                    pcpd_msgs::rpc::HL2SpatialMapping_Frustum&& _frustum);

            /*!
             * @brief This function returns a constant reference to member frustum
             * @return Constant reference to member frustum
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Frustum& frustum() const;

            /*!
             * @brief This function returns a reference to member frustum
             * @return Reference to member frustum
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Frustum& frustum();
            /*!
             * @brief This function copies the value in member oriented_box
             * @param _oriented_box New value to be copied in member oriented_box
             */
            eProsima_user_DllExport void oriented_box(
                    const pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& _oriented_box);

            /*!
             * @brief This function moves the value in member oriented_box
             * @param _oriented_box New value to be moved in member oriented_box
             */
            eProsima_user_DllExport void oriented_box(
                    pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox&& _oriented_box);

            /*!
             * @brief This function returns a constant reference to member oriented_box
             * @return Constant reference to member oriented_box
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& oriented_box() const;

            /*!
             * @brief This function returns a reference to member oriented_box
             * @return Reference to member oriented_box
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox& oriented_box();
            /*!
             * @brief This function copies the value in member sphere
             * @param _sphere New value to be copied in member sphere
             */
            eProsima_user_DllExport void sphere(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Sphere& _sphere);

            /*!
             * @brief This function moves the value in member sphere
             * @param _sphere New value to be moved in member sphere
             */
            eProsima_user_DllExport void sphere(
                    pcpd_msgs::rpc::HL2SpatialMapping_Sphere&& _sphere);

            /*!
             * @brief This function returns a constant reference to member sphere
             * @return Constant reference to member sphere
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SpatialMapping_Sphere& sphere() const;

            /*!
             * @brief This function returns a reference to member sphere
             * @return Reference to member sphere
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SpatialMapping_Sphere& sphere();

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SpatialMapping_Volume& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);




        private:

            pcpd_msgs::rpc::HL2SpatialMapping_VolumeType m__d;

            pcpd_msgs::rpc::HL2SpatialMapping_BoundingBox m_bounding_box;
            pcpd_msgs::rpc::HL2SpatialMapping_Frustum m_frustum;
            pcpd_msgs::rpc::HL2SpatialMapping_OrientedBox m_oriented_box;
            pcpd_msgs::rpc::HL2SpatialMapping_Sphere m_sphere;
        };
        /*!
         * @brief This class represents the structure HL2SMRequest_SetVolumes defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SMRequest_SetVolumes
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SMRequest_SetVolumes();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SMRequest_SetVolumes();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_SetVolumes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_SetVolumes(
                    const HL2SMRequest_SetVolumes& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_SetVolumes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_SetVolumes(
                    HL2SMRequest_SetVolumes&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_SetVolumes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_SetVolumes& operator =(
                    const HL2SMRequest_SetVolumes& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_SetVolumes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_SetVolumes& operator =(
                    HL2SMRequest_SetVolumes&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMRequest_SetVolumes object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SMRequest_SetVolumes& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMRequest_SetVolumes object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SMRequest_SetVolumes& x) const;

            /*!
             * @brief This function copies the value in member volumes
             * @param _volumes New value to be copied in member volumes
             */
            eProsima_user_DllExport void volumes(
                    const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_Volume>& _volumes);

            /*!
             * @brief This function moves the value in member volumes
             * @param _volumes New value to be moved in member volumes
             */
            eProsima_user_DllExport void volumes(
                    std::vector<pcpd_msgs::rpc::HL2SpatialMapping_Volume>&& _volumes);

            /*!
             * @brief This function returns a constant reference to member volumes
             * @return Constant reference to member volumes
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_Volume>& volumes() const;

            /*!
             * @brief This function returns a reference to member volumes
             * @return Reference to member volumes
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SpatialMapping_Volume>& volumes();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SMRequest_SetVolumes& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::vector<pcpd_msgs::rpc::HL2SpatialMapping_Volume> m_volumes;

        };
        /*!
         * @brief This class represents the structure HL2SMResponse_GetObservedSurfaces defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SMResponse_GetObservedSurfaces
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SMResponse_GetObservedSurfaces();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SMResponse_GetObservedSurfaces();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetObservedSurfaces(
                    const HL2SMResponse_GetObservedSurfaces& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetObservedSurfaces(
                    HL2SMResponse_GetObservedSurfaces&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetObservedSurfaces& operator =(
                    const HL2SMResponse_GetObservedSurfaces& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetObservedSurfaces& operator =(
                    HL2SMResponse_GetObservedSurfaces&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SMResponse_GetObservedSurfaces& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SMResponse_GetObservedSurfaces& x) const;

            /*!
             * @brief This function copies the value in member surfaces
             * @param _surfaces New value to be copied in member surfaces
             */
            eProsima_user_DllExport void surfaces(
                    const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo>& _surfaces);

            /*!
             * @brief This function moves the value in member surfaces
             * @param _surfaces New value to be moved in member surfaces
             */
            eProsima_user_DllExport void surfaces(
                    std::vector<pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo>&& _surfaces);

            /*!
             * @brief This function returns a constant reference to member surfaces
             * @return Constant reference to member surfaces
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo>& surfaces() const;

            /*!
             * @brief This function returns a reference to member surfaces
             * @return Reference to member surfaces
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo>& surfaces();
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SMResponse_GetObservedSurfaces& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::vector<pcpd_msgs::rpc::HL2SpatialMapping_SurfaceInfo> m_surfaces;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure HL2SMRequest_GetMeshes defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SMRequest_GetMeshes
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SMRequest_GetMeshes();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SMRequest_GetMeshes();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_GetMeshes(
                    const HL2SMRequest_GetMeshes& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_GetMeshes(
                    HL2SMRequest_GetMeshes&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_GetMeshes& operator =(
                    const HL2SMRequest_GetMeshes& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMRequest_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMRequest_GetMeshes& operator =(
                    HL2SMRequest_GetMeshes&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMRequest_GetMeshes object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SMRequest_GetMeshes& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMRequest_GetMeshes object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SMRequest_GetMeshes& x) const;

            /*!
             * @brief This function sets a value in member max_tasks
             * @param _max_tasks New value for member max_tasks
             */
            eProsima_user_DllExport void max_tasks(
                    uint32_t _max_tasks);

            /*!
             * @brief This function returns the value of member max_tasks
             * @return Value of member max_tasks
             */
            eProsima_user_DllExport uint32_t max_tasks() const;

            /*!
             * @brief This function returns a reference to member max_tasks
             * @return Reference to member max_tasks
             */
            eProsima_user_DllExport uint32_t& max_tasks();

            /*!
             * @brief This function copies the value in member description
             * @param _description New value to be copied in member description
             */
            eProsima_user_DllExport void description(
                    const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription>& _description);

            /*!
             * @brief This function moves the value in member description
             * @param _description New value to be moved in member description
             */
            eProsima_user_DllExport void description(
                    std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription>&& _description);

            /*!
             * @brief This function returns a constant reference to member description
             * @return Constant reference to member description
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription>& description() const;

            /*!
             * @brief This function returns a reference to member description
             * @return Reference to member description
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription>& description();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SMRequest_GetMeshes& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_max_tasks;
            std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshDescription> m_description;

        };
        /*!
         * @brief This class represents the structure HL2SMResponse_GetMeshes defined by the user in the IDL file.
         * @ingroup HOLOLENS2SPATIALMAPPING
         */
        class HL2SMResponse_GetMeshes
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SMResponse_GetMeshes();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SMResponse_GetMeshes();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetMeshes(
                    const HL2SMResponse_GetMeshes& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetMeshes(
                    HL2SMResponse_GetMeshes&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetMeshes& operator =(
                    const HL2SMResponse_GetMeshes& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SMResponse_GetMeshes that will be copied.
             */
            eProsima_user_DllExport HL2SMResponse_GetMeshes& operator =(
                    HL2SMResponse_GetMeshes&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMResponse_GetMeshes object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SMResponse_GetMeshes& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SMResponse_GetMeshes object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SMResponse_GetMeshes& x) const;

            /*!
             * @brief This function copies the value in member meshes
             * @param _meshes New value to be copied in member meshes
             */
            eProsima_user_DllExport void meshes(
                    const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo>& _meshes);

            /*!
             * @brief This function moves the value in member meshes
             * @param _meshes New value to be moved in member meshes
             */
            eProsima_user_DllExport void meshes(
                    std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo>&& _meshes);

            /*!
             * @brief This function returns a constant reference to member meshes
             * @return Constant reference to member meshes
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo>& meshes() const;

            /*!
             * @brief This function returns a reference to member meshes
             * @return Reference to member meshes
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo>& meshes();
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SMResponse_GetMeshes& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::vector<pcpd_msgs::rpc::HL2SpatialMapping_MeshInfo> m_meshes;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
    } // namespace rpc
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_RPC_HOLOLENS2SPATIALMAPPING_H_