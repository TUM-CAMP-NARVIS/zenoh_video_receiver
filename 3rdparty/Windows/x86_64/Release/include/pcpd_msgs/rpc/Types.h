// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Types.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_RPC_TYPES_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_RPC_TYPES_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Types_SOURCE)
#define Types_DllAPI __declspec( dllexport )
#else
#define Types_DllAPI __declspec( dllimport )
#endif // Types_SOURCE
#else
#define Types_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Types_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace rpc {

        typedef std::array<uint16_t, 4> uint16__4;

        typedef std::array<uint8_t, 8> uint8__8;
        /*!
         * @brief This class represents the enumeration RPCResponseStatus defined by the user in the IDL file.
         * @ingroup TYPES
         */
        enum RPCResponseStatus : uint32_t
        {
            RPC_STATUS_SUCCESS,
            RPC_STATUS_ERROR
        };
        /*!
         * @brief This class represents the structure HL2Guid defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class HL2Guid
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2Guid();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2Guid();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2Guid that will be copied.
             */
            eProsima_user_DllExport HL2Guid(
                    const HL2Guid& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2Guid that will be copied.
             */
            eProsima_user_DllExport HL2Guid(
                    HL2Guid&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2Guid that will be copied.
             */
            eProsima_user_DllExport HL2Guid& operator =(
                    const HL2Guid& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2Guid that will be copied.
             */
            eProsima_user_DllExport HL2Guid& operator =(
                    HL2Guid&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2Guid object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2Guid& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2Guid object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2Guid& x) const;

            /*!
             * @brief This function sets a value in member Data1
             * @param _Data1 New value for member Data1
             */
            eProsima_user_DllExport void Data1(
                    uint32_t _Data1);

            /*!
             * @brief This function returns the value of member Data1
             * @return Value of member Data1
             */
            eProsima_user_DllExport uint32_t Data1() const;

            /*!
             * @brief This function returns a reference to member Data1
             * @return Reference to member Data1
             */
            eProsima_user_DllExport uint32_t& Data1();

            /*!
             * @brief This function sets a value in member Data2
             * @param _Data2 New value for member Data2
             */
            eProsima_user_DllExport void Data2(
                    uint16_t _Data2);

            /*!
             * @brief This function returns the value of member Data2
             * @return Value of member Data2
             */
            eProsima_user_DllExport uint16_t Data2() const;

            /*!
             * @brief This function returns a reference to member Data2
             * @return Reference to member Data2
             */
            eProsima_user_DllExport uint16_t& Data2();

            /*!
             * @brief This function sets a value in member Data3
             * @param _Data3 New value for member Data3
             */
            eProsima_user_DllExport void Data3(
                    uint16_t _Data3);

            /*!
             * @brief This function returns the value of member Data3
             * @return Value of member Data3
             */
            eProsima_user_DllExport uint16_t Data3() const;

            /*!
             * @brief This function returns a reference to member Data3
             * @return Reference to member Data3
             */
            eProsima_user_DllExport uint16_t& Data3();

            /*!
             * @brief This function copies the value in member Data4
             * @param _Data4 New value to be copied in member Data4
             */
            eProsima_user_DllExport void Data4(
                    const pcpd_msgs::rpc::uint8__8& _Data4);

            /*!
             * @brief This function moves the value in member Data4
             * @param _Data4 New value to be moved in member Data4
             */
            eProsima_user_DllExport void Data4(
                    pcpd_msgs::rpc::uint8__8&& _Data4);

            /*!
             * @brief This function returns a constant reference to member Data4
             * @return Constant reference to member Data4
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::uint8__8& Data4() const;

            /*!
             * @brief This function returns a reference to member Data4
             * @return Reference to member Data4
             */
            eProsima_user_DllExport pcpd_msgs::rpc::uint8__8& Data4();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2Guid& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_Data1;
            uint16_t m_Data2;
            uint16_t m_Data3;
            pcpd_msgs::rpc::uint8__8 m_Data4;

        };
        /*!
         * @brief This class represents the structure NullRequest defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class NullRequest
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport NullRequest();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~NullRequest();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::NullRequest that will be copied.
             */
            eProsima_user_DllExport NullRequest(
                    const NullRequest& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::NullRequest that will be copied.
             */
            eProsima_user_DllExport NullRequest(
                    NullRequest&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::NullRequest that will be copied.
             */
            eProsima_user_DllExport NullRequest& operator =(
                    const NullRequest& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::NullRequest that will be copied.
             */
            eProsima_user_DllExport NullRequest& operator =(
                    NullRequest&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::NullRequest object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const NullRequest& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::NullRequest object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const NullRequest& x) const;

            /*!
             * @brief This function sets a value in member dummy
             * @param _dummy New value for member dummy
             */
            eProsima_user_DllExport void dummy(
                    uint8_t _dummy);

            /*!
             * @brief This function returns the value of member dummy
             * @return Value of member dummy
             */
            eProsima_user_DllExport uint8_t dummy() const;

            /*!
             * @brief This function returns a reference to member dummy
             * @return Reference to member dummy
             */
            eProsima_user_DllExport uint8_t& dummy();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::NullRequest& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_dummy;

        };
        /*!
         * @brief This class represents the structure NullReply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class NullReply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport NullReply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~NullReply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::NullReply that will be copied.
             */
            eProsima_user_DllExport NullReply(
                    const NullReply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::NullReply that will be copied.
             */
            eProsima_user_DllExport NullReply(
                    NullReply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::NullReply that will be copied.
             */
            eProsima_user_DllExport NullReply& operator =(
                    const NullReply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::NullReply that will be copied.
             */
            eProsima_user_DllExport NullReply& operator =(
                    NullReply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::NullReply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const NullReply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::NullReply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const NullReply& x) const;

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::NullReply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure StringRequest defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class StringRequest
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport StringRequest();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~StringRequest();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::StringRequest that will be copied.
             */
            eProsima_user_DllExport StringRequest(
                    const StringRequest& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::StringRequest that will be copied.
             */
            eProsima_user_DllExport StringRequest(
                    StringRequest&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::StringRequest that will be copied.
             */
            eProsima_user_DllExport StringRequest& operator =(
                    const StringRequest& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::StringRequest that will be copied.
             */
            eProsima_user_DllExport StringRequest& operator =(
                    StringRequest&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::StringRequest object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const StringRequest& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::StringRequest object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const StringRequest& x) const;

            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            eProsima_user_DllExport void value(
                    const std::string& _value);

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            eProsima_user_DllExport void value(
                    std::string&& _value);

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            eProsima_user_DllExport const std::string& value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport std::string& value();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::StringRequest& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_value;

        };
        /*!
         * @brief This class represents the structure StringReply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class StringReply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport StringReply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~StringReply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::StringReply that will be copied.
             */
            eProsima_user_DllExport StringReply(
                    const StringReply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::StringReply that will be copied.
             */
            eProsima_user_DllExport StringReply(
                    StringReply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::StringReply that will be copied.
             */
            eProsima_user_DllExport StringReply& operator =(
                    const StringReply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::StringReply that will be copied.
             */
            eProsima_user_DllExport StringReply& operator =(
                    StringReply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::StringReply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const StringReply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::StringReply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const StringReply& x) const;

            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            eProsima_user_DllExport void value(
                    const std::string& _value);

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            eProsima_user_DllExport void value(
                    std::string&& _value);

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            eProsima_user_DllExport const std::string& value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport std::string& value();
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::StringReply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure BoolRequest defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class BoolRequest
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BoolRequest();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BoolRequest();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::BoolRequest that will be copied.
             */
            eProsima_user_DllExport BoolRequest(
                    const BoolRequest& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::BoolRequest that will be copied.
             */
            eProsima_user_DllExport BoolRequest(
                    BoolRequest&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::BoolRequest that will be copied.
             */
            eProsima_user_DllExport BoolRequest& operator =(
                    const BoolRequest& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::BoolRequest that will be copied.
             */
            eProsima_user_DllExport BoolRequest& operator =(
                    BoolRequest&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::BoolRequest object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const BoolRequest& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::BoolRequest object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const BoolRequest& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    bool _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport bool value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport bool& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::BoolRequest& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_value;

        };
        /*!
         * @brief This class represents the structure BoolReply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class BoolReply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BoolReply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BoolReply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::BoolReply that will be copied.
             */
            eProsima_user_DllExport BoolReply(
                    const BoolReply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::BoolReply that will be copied.
             */
            eProsima_user_DllExport BoolReply(
                    BoolReply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::BoolReply that will be copied.
             */
            eProsima_user_DllExport BoolReply& operator =(
                    const BoolReply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::BoolReply that will be copied.
             */
            eProsima_user_DllExport BoolReply& operator =(
                    BoolReply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::BoolReply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const BoolReply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::BoolReply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const BoolReply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    bool _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport bool value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport bool& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::BoolReply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure UInt8Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt8Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt8Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt8Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Request that will be copied.
             */
            eProsima_user_DllExport UInt8Request(
                    const UInt8Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Request that will be copied.
             */
            eProsima_user_DllExport UInt8Request(
                    UInt8Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Request that will be copied.
             */
            eProsima_user_DllExport UInt8Request& operator =(
                    const UInt8Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Request that will be copied.
             */
            eProsima_user_DllExport UInt8Request& operator =(
                    UInt8Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt8Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt8Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt8Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt8Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint8_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint8_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint8_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt8Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_value;

        };
        /*!
         * @brief This class represents the structure UInt8Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt8Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt8Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt8Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Reply that will be copied.
             */
            eProsima_user_DllExport UInt8Reply(
                    const UInt8Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Reply that will be copied.
             */
            eProsima_user_DllExport UInt8Reply(
                    UInt8Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Reply that will be copied.
             */
            eProsima_user_DllExport UInt8Reply& operator =(
                    const UInt8Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt8Reply that will be copied.
             */
            eProsima_user_DllExport UInt8Reply& operator =(
                    UInt8Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt8Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt8Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt8Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt8Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint8_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint8_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint8_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt8Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure UInt16Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt16Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt16Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt16Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Request that will be copied.
             */
            eProsima_user_DllExport UInt16Request(
                    const UInt16Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Request that will be copied.
             */
            eProsima_user_DllExport UInt16Request(
                    UInt16Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Request that will be copied.
             */
            eProsima_user_DllExport UInt16Request& operator =(
                    const UInt16Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Request that will be copied.
             */
            eProsima_user_DllExport UInt16Request& operator =(
                    UInt16Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt16Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt16Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt16Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt16Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint16_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint16_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint16_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt16Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint16_t m_value;

        };
        /*!
         * @brief This class represents the structure UInt16Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt16Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt16Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt16Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Reply that will be copied.
             */
            eProsima_user_DllExport UInt16Reply(
                    const UInt16Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Reply that will be copied.
             */
            eProsima_user_DllExport UInt16Reply(
                    UInt16Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Reply that will be copied.
             */
            eProsima_user_DllExport UInt16Reply& operator =(
                    const UInt16Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt16Reply that will be copied.
             */
            eProsima_user_DllExport UInt16Reply& operator =(
                    UInt16Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt16Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt16Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt16Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt16Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint16_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint16_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint16_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt16Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint16_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure UInt32Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt32Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt32Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt32Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Request that will be copied.
             */
            eProsima_user_DllExport UInt32Request(
                    const UInt32Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Request that will be copied.
             */
            eProsima_user_DllExport UInt32Request(
                    UInt32Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Request that will be copied.
             */
            eProsima_user_DllExport UInt32Request& operator =(
                    const UInt32Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Request that will be copied.
             */
            eProsima_user_DllExport UInt32Request& operator =(
                    UInt32Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt32Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt32Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt32Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt32Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint32_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint32_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint32_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt32Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_value;

        };
        /*!
         * @brief This class represents the structure UInt32Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt32Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt32Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt32Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Reply that will be copied.
             */
            eProsima_user_DllExport UInt32Reply(
                    const UInt32Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Reply that will be copied.
             */
            eProsima_user_DllExport UInt32Reply(
                    UInt32Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Reply that will be copied.
             */
            eProsima_user_DllExport UInt32Reply& operator =(
                    const UInt32Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt32Reply that will be copied.
             */
            eProsima_user_DllExport UInt32Reply& operator =(
                    UInt32Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt32Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt32Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt32Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt32Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint32_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint32_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint32_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt32Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure UInt64Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt64Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt64Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt64Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Request that will be copied.
             */
            eProsima_user_DllExport UInt64Request(
                    const UInt64Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Request that will be copied.
             */
            eProsima_user_DllExport UInt64Request(
                    UInt64Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Request that will be copied.
             */
            eProsima_user_DllExport UInt64Request& operator =(
                    const UInt64Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Request that will be copied.
             */
            eProsima_user_DllExport UInt64Request& operator =(
                    UInt64Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt64Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt64Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt64Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt64Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint64_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint64_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint64_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt64Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint64_t m_value;

        };
        /*!
         * @brief This class represents the structure UInt64Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class UInt64Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport UInt64Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~UInt64Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Reply that will be copied.
             */
            eProsima_user_DllExport UInt64Reply(
                    const UInt64Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Reply that will be copied.
             */
            eProsima_user_DllExport UInt64Reply(
                    UInt64Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Reply that will be copied.
             */
            eProsima_user_DllExport UInt64Reply& operator =(
                    const UInt64Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::UInt64Reply that will be copied.
             */
            eProsima_user_DllExport UInt64Reply& operator =(
                    UInt64Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt64Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const UInt64Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::UInt64Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const UInt64Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    uint64_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport uint64_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport uint64_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::UInt64Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint64_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure Int8Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int8Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int8Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int8Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Request that will be copied.
             */
            eProsima_user_DllExport Int8Request(
                    const Int8Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Request that will be copied.
             */
            eProsima_user_DllExport Int8Request(
                    Int8Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Request that will be copied.
             */
            eProsima_user_DllExport Int8Request& operator =(
                    const Int8Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Request that will be copied.
             */
            eProsima_user_DllExport Int8Request& operator =(
                    Int8Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int8Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int8Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int8Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int8Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int8_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int8_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int8_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int8Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int8_t m_value;

        };
        /*!
         * @brief This class represents the structure Int8Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int8Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int8Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int8Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Reply that will be copied.
             */
            eProsima_user_DllExport Int8Reply(
                    const Int8Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Reply that will be copied.
             */
            eProsima_user_DllExport Int8Reply(
                    Int8Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Reply that will be copied.
             */
            eProsima_user_DllExport Int8Reply& operator =(
                    const Int8Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int8Reply that will be copied.
             */
            eProsima_user_DllExport Int8Reply& operator =(
                    Int8Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int8Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int8Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int8Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int8Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int8_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int8_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int8_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int8Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int8_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure Int16Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int16Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int16Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int16Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Request that will be copied.
             */
            eProsima_user_DllExport Int16Request(
                    const Int16Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Request that will be copied.
             */
            eProsima_user_DllExport Int16Request(
                    Int16Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Request that will be copied.
             */
            eProsima_user_DllExport Int16Request& operator =(
                    const Int16Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Request that will be copied.
             */
            eProsima_user_DllExport Int16Request& operator =(
                    Int16Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int16Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int16Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int16Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int16Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int16_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int16_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int16_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int16Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int16_t m_value;

        };
        /*!
         * @brief This class represents the structure Int16Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int16Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int16Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int16Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Reply that will be copied.
             */
            eProsima_user_DllExport Int16Reply(
                    const Int16Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Reply that will be copied.
             */
            eProsima_user_DllExport Int16Reply(
                    Int16Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Reply that will be copied.
             */
            eProsima_user_DllExport Int16Reply& operator =(
                    const Int16Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int16Reply that will be copied.
             */
            eProsima_user_DllExport Int16Reply& operator =(
                    Int16Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int16Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int16Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int16Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int16Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int16_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int16_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int16_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int16Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int16_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure Int32Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int32Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int32Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int32Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Request that will be copied.
             */
            eProsima_user_DllExport Int32Request(
                    const Int32Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Request that will be copied.
             */
            eProsima_user_DllExport Int32Request(
                    Int32Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Request that will be copied.
             */
            eProsima_user_DllExport Int32Request& operator =(
                    const Int32Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Request that will be copied.
             */
            eProsima_user_DllExport Int32Request& operator =(
                    Int32Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int32Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int32Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int32Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int32Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int32_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int32_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int32_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int32Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int32_t m_value;

        };
        /*!
         * @brief This class represents the structure Int32Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int32Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int32Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int32Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Reply that will be copied.
             */
            eProsima_user_DllExport Int32Reply(
                    const Int32Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Reply that will be copied.
             */
            eProsima_user_DllExport Int32Reply(
                    Int32Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Reply that will be copied.
             */
            eProsima_user_DllExport Int32Reply& operator =(
                    const Int32Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int32Reply that will be copied.
             */
            eProsima_user_DllExport Int32Reply& operator =(
                    Int32Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int32Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int32Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int32Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int32Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int32_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int32_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int32_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int32Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int32_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure Int64Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int64Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int64Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int64Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Request that will be copied.
             */
            eProsima_user_DllExport Int64Request(
                    const Int64Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Request that will be copied.
             */
            eProsima_user_DllExport Int64Request(
                    Int64Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Request that will be copied.
             */
            eProsima_user_DllExport Int64Request& operator =(
                    const Int64Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Request that will be copied.
             */
            eProsima_user_DllExport Int64Request& operator =(
                    Int64Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int64Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int64Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int64Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int64Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int64_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int64_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int64_t& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int64Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int64_t m_value;

        };
        /*!
         * @brief This class represents the structure Int64Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Int64Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Int64Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Int64Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Reply that will be copied.
             */
            eProsima_user_DllExport Int64Reply(
                    const Int64Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Reply that will be copied.
             */
            eProsima_user_DllExport Int64Reply(
                    Int64Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Reply that will be copied.
             */
            eProsima_user_DllExport Int64Reply& operator =(
                    const Int64Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Int64Reply that will be copied.
             */
            eProsima_user_DllExport Int64Reply& operator =(
                    Int64Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int64Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Int64Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Int64Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Int64Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    int64_t _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport int64_t value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport int64_t& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Int64Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int64_t m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure Float32Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Float32Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Float32Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Float32Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Request that will be copied.
             */
            eProsima_user_DllExport Float32Request(
                    const Float32Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Request that will be copied.
             */
            eProsima_user_DllExport Float32Request(
                    Float32Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Request that will be copied.
             */
            eProsima_user_DllExport Float32Request& operator =(
                    const Float32Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Request that will be copied.
             */
            eProsima_user_DllExport Float32Request& operator =(
                    Float32Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float32Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Float32Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float32Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Float32Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    float _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport float value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport float& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Float32Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            float m_value;

        };
        /*!
         * @brief This class represents the structure Float32Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Float32Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Float32Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Float32Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Reply that will be copied.
             */
            eProsima_user_DllExport Float32Reply(
                    const Float32Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Reply that will be copied.
             */
            eProsima_user_DllExport Float32Reply(
                    Float32Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Reply that will be copied.
             */
            eProsima_user_DllExport Float32Reply& operator =(
                    const Float32Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float32Reply that will be copied.
             */
            eProsima_user_DllExport Float32Reply& operator =(
                    Float32Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float32Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Float32Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float32Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Float32Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    float _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport float value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport float& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Float32Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            float m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
        /*!
         * @brief This class represents the structure Float64Request defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Float64Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Float64Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Float64Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Request that will be copied.
             */
            eProsima_user_DllExport Float64Request(
                    const Float64Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Request that will be copied.
             */
            eProsima_user_DllExport Float64Request(
                    Float64Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Request that will be copied.
             */
            eProsima_user_DllExport Float64Request& operator =(
                    const Float64Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Request that will be copied.
             */
            eProsima_user_DllExport Float64Request& operator =(
                    Float64Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float64Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Float64Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float64Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Float64Request& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    double _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport double value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport double& value();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Float64Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_value;

        };
        /*!
         * @brief This class represents the structure Float64Reply defined by the user in the IDL file.
         * @ingroup TYPES
         */
        class Float64Reply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Float64Reply();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Float64Reply();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Reply that will be copied.
             */
            eProsima_user_DllExport Float64Reply(
                    const Float64Reply& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Reply that will be copied.
             */
            eProsima_user_DllExport Float64Reply(
                    Float64Reply&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Reply that will be copied.
             */
            eProsima_user_DllExport Float64Reply& operator =(
                    const Float64Reply& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::Float64Reply that will be copied.
             */
            eProsima_user_DllExport Float64Reply& operator =(
                    Float64Reply&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float64Reply object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Float64Reply& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::Float64Reply object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Float64Reply& x) const;

            /*!
             * @brief This function sets a value in member value
             * @param _value New value for member value
             */
            eProsima_user_DllExport void value(
                    double _value);

            /*!
             * @brief This function returns the value of member value
             * @return Value of member value
             */
            eProsima_user_DllExport double value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            eProsima_user_DllExport double& value();

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::Float64Reply& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_value;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
    } // namespace rpc
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_RPC_TYPES_H_