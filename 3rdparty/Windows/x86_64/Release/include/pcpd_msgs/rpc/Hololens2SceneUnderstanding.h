// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Hololens2SceneUnderstanding.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_PCPD_MSGS_RPC_HOLOLENS2SCENEUNDERSTANDING_H_
#define _FAST_DDS_GENERATED_PCPD_MSGS_RPC_HOLOLENS2SCENEUNDERSTANDING_H_

#include "pcpd_msgs/rpc/Types.h"
#include "geometry_msgs/msg/Vector3.h"
#include "geometry_msgs/msg/Quaternion.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Hololens2SceneUnderstanding_SOURCE)
#define Hololens2SceneUnderstanding_DllAPI __declspec( dllexport )
#else
#define Hololens2SceneUnderstanding_DllAPI __declspec( dllimport )
#endif // Hololens2SceneUnderstanding_SOURCE
#else
#define Hololens2SceneUnderstanding_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Hololens2SceneUnderstanding_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace pcpd_msgs {
    namespace rpc {

        typedef std::array<float, 16> float__16;

        typedef std::array<float, 2> float__2;
        /*!
         * @brief This class represents the enumeration HL2SUSceneUnderstanding_SceneMeshLevelOfDetail defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        enum HL2SUSceneUnderstanding_SceneMeshLevelOfDetail : uint32_t
        {
            SMLOD_Coarse,
            SMLOD_Medium,
            SMLOD_Fine,
            SMLOD_Unlimited
        };
        /*!
         * @brief This class represents the enumeration HL2SUSceneUnderstanding_Status defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        enum HL2SUSceneUnderstanding_Status : uint32_t
        {
            SUS_OK,
            SUS_Failed,
            SUS_ObjectDisposed,
            SUS_OutOfMemory,
            SUS_InvalidArgument,
            SUS_OutOfRange,
            SUS_NotImplemented,
            SUS_KeyNotFound
        };
        /*!
         * @brief This class represents the enumeration HL2SUSceneUnderstanding_SceneObjectKind defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        enum HL2SUSceneUnderstanding_SceneObjectKind : uint32_t
        {
            SKO_Background,
            SKO_Wall,
            SKO_Floor,
            SKO_Ceiling,
            SKO_Platform,
            SKO_Unknown,
            SKO_World,
            SKO_CompletelyInferred
        };
        /*!
         * @brief This class represents the enumeration HL2SUSceneUnderstanding_SceneQuadAlignment defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        enum HL2SUSceneUnderstanding_SceneQuadAlignment : uint32_t
        {
            SQA_NonOrthogonal,
            SQA_Horizontal,
            SQA_Vertical
        };
        /*!
         * @brief This class represents the structure HL2SUSceneUnderstanding_Mesh defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        class HL2SUSceneUnderstanding_Mesh
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_Mesh();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SUSceneUnderstanding_Mesh();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_Mesh(
                    const HL2SUSceneUnderstanding_Mesh& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_Mesh(
                    HL2SUSceneUnderstanding_Mesh&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_Mesh& operator =(
                    const HL2SUSceneUnderstanding_Mesh& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_Mesh& operator =(
                    HL2SUSceneUnderstanding_Mesh&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SUSceneUnderstanding_Mesh& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SUSceneUnderstanding_Mesh& x) const;

            /*!
             * @brief This function sets a value in member vertex_fields
             * @param _vertex_fields New value for member vertex_fields
             */
            eProsima_user_DllExport void vertex_fields(
                    uint32_t _vertex_fields);

            /*!
             * @brief This function returns the value of member vertex_fields
             * @return Value of member vertex_fields
             */
            eProsima_user_DllExport uint32_t vertex_fields() const;

            /*!
             * @brief This function returns a reference to member vertex_fields
             * @return Reference to member vertex_fields
             */
            eProsima_user_DllExport uint32_t& vertex_fields();

            /*!
             * @brief This function sets a value in member count_vertices
             * @param _count_vertices New value for member count_vertices
             */
            eProsima_user_DllExport void count_vertices(
                    uint32_t _count_vertices);

            /*!
             * @brief This function returns the value of member count_vertices
             * @return Value of member count_vertices
             */
            eProsima_user_DllExport uint32_t count_vertices() const;

            /*!
             * @brief This function returns a reference to member count_vertices
             * @return Reference to member count_vertices
             */
            eProsima_user_DllExport uint32_t& count_vertices();

            /*!
             * @brief This function sets a value in member count_triangle_indices
             * @param _count_triangle_indices New value for member count_triangle_indices
             */
            eProsima_user_DllExport void count_triangle_indices(
                    uint32_t _count_triangle_indices);

            /*!
             * @brief This function returns the value of member count_triangle_indices
             * @return Value of member count_triangle_indices
             */
            eProsima_user_DllExport uint32_t count_triangle_indices() const;

            /*!
             * @brief This function returns a reference to member count_triangle_indices
             * @return Reference to member count_triangle_indices
             */
            eProsima_user_DllExport uint32_t& count_triangle_indices();

            /*!
             * @brief This function copies the value in member vertices
             * @param _vertices New value to be copied in member vertices
             */
            eProsima_user_DllExport void vertices(
                    const std::vector<uint32_t>& _vertices);

            /*!
             * @brief This function moves the value in member vertices
             * @param _vertices New value to be moved in member vertices
             */
            eProsima_user_DllExport void vertices(
                    std::vector<uint32_t>&& _vertices);

            /*!
             * @brief This function returns a constant reference to member vertices
             * @return Constant reference to member vertices
             */
            eProsima_user_DllExport const std::vector<uint32_t>& vertices() const;

            /*!
             * @brief This function returns a reference to member vertices
             * @return Reference to member vertices
             */
            eProsima_user_DllExport std::vector<uint32_t>& vertices();
            /*!
             * @brief This function copies the value in member triangle_indices
             * @param _triangle_indices New value to be copied in member triangle_indices
             */
            eProsima_user_DllExport void triangle_indices(
                    const std::vector<uint32_t>& _triangle_indices);

            /*!
             * @brief This function moves the value in member triangle_indices
             * @param _triangle_indices New value to be moved in member triangle_indices
             */
            eProsima_user_DllExport void triangle_indices(
                    std::vector<uint32_t>&& _triangle_indices);

            /*!
             * @brief This function returns a constant reference to member triangle_indices
             * @return Constant reference to member triangle_indices
             */
            eProsima_user_DllExport const std::vector<uint32_t>& triangle_indices() const;

            /*!
             * @brief This function returns a reference to member triangle_indices
             * @return Reference to member triangle_indices
             */
            eProsima_user_DllExport std::vector<uint32_t>& triangle_indices();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_vertex_fields;
            uint32_t m_count_vertices;
            uint32_t m_count_triangle_indices;
            std::vector<uint32_t> m_vertices;
            std::vector<uint32_t> m_triangle_indices;

        };
        /*!
         * @brief This class represents the structure HL2SUSceneUnderstanding_SceneQuerySettings defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        class HL2SUSceneUnderstanding_SceneQuerySettings
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneQuerySettings();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SUSceneUnderstanding_SceneQuerySettings();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneQuerySettings(
                    const HL2SUSceneUnderstanding_SceneQuerySettings& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneQuerySettings(
                    HL2SUSceneUnderstanding_SceneQuerySettings&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneQuerySettings& operator =(
                    const HL2SUSceneUnderstanding_SceneQuerySettings& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneQuerySettings& operator =(
                    HL2SUSceneUnderstanding_SceneQuerySettings&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SUSceneUnderstanding_SceneQuerySettings& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SUSceneUnderstanding_SceneQuerySettings& x) const;

            /*!
             * @brief This function sets a value in member enable_scene_object_quads
             * @param _enable_scene_object_quads New value for member enable_scene_object_quads
             */
            eProsima_user_DllExport void enable_scene_object_quads(
                    bool _enable_scene_object_quads);

            /*!
             * @brief This function returns the value of member enable_scene_object_quads
             * @return Value of member enable_scene_object_quads
             */
            eProsima_user_DllExport bool enable_scene_object_quads() const;

            /*!
             * @brief This function returns a reference to member enable_scene_object_quads
             * @return Reference to member enable_scene_object_quads
             */
            eProsima_user_DllExport bool& enable_scene_object_quads();

            /*!
             * @brief This function sets a value in member enable_scene_object_meshes
             * @param _enable_scene_object_meshes New value for member enable_scene_object_meshes
             */
            eProsima_user_DllExport void enable_scene_object_meshes(
                    bool _enable_scene_object_meshes);

            /*!
             * @brief This function returns the value of member enable_scene_object_meshes
             * @return Value of member enable_scene_object_meshes
             */
            eProsima_user_DllExport bool enable_scene_object_meshes() const;

            /*!
             * @brief This function returns a reference to member enable_scene_object_meshes
             * @return Reference to member enable_scene_object_meshes
             */
            eProsima_user_DllExport bool& enable_scene_object_meshes();

            /*!
             * @brief This function sets a value in member enable_only_observed_scene_objects
             * @param _enable_only_observed_scene_objects New value for member enable_only_observed_scene_objects
             */
            eProsima_user_DllExport void enable_only_observed_scene_objects(
                    bool _enable_only_observed_scene_objects);

            /*!
             * @brief This function returns the value of member enable_only_observed_scene_objects
             * @return Value of member enable_only_observed_scene_objects
             */
            eProsima_user_DllExport bool enable_only_observed_scene_objects() const;

            /*!
             * @brief This function returns a reference to member enable_only_observed_scene_objects
             * @return Reference to member enable_only_observed_scene_objects
             */
            eProsima_user_DllExport bool& enable_only_observed_scene_objects();

            /*!
             * @brief This function sets a value in member enable_world_mesh
             * @param _enable_world_mesh New value for member enable_world_mesh
             */
            eProsima_user_DllExport void enable_world_mesh(
                    bool _enable_world_mesh);

            /*!
             * @brief This function returns the value of member enable_world_mesh
             * @return Value of member enable_world_mesh
             */
            eProsima_user_DllExport bool enable_world_mesh() const;

            /*!
             * @brief This function returns a reference to member enable_world_mesh
             * @return Reference to member enable_world_mesh
             */
            eProsima_user_DllExport bool& enable_world_mesh();

            /*!
             * @brief This function sets a value in member requested_mesh_level_of_detail
             * @param _requested_mesh_level_of_detail New value for member requested_mesh_level_of_detail
             */
            eProsima_user_DllExport void requested_mesh_level_of_detail(
                    pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneMeshLevelOfDetail _requested_mesh_level_of_detail);

            /*!
             * @brief This function returns the value of member requested_mesh_level_of_detail
             * @return Value of member requested_mesh_level_of_detail
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneMeshLevelOfDetail requested_mesh_level_of_detail() const;

            /*!
             * @brief This function returns a reference to member requested_mesh_level_of_detail
             * @return Reference to member requested_mesh_level_of_detail
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneMeshLevelOfDetail& requested_mesh_level_of_detail();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_enable_scene_object_quads;
            bool m_enable_scene_object_meshes;
            bool m_enable_only_observed_scene_objects;
            bool m_enable_world_mesh;
            pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneMeshLevelOfDetail m_requested_mesh_level_of_detail;

        };
        /*!
         * @brief This class represents the structure HL2SUSceneUnderstanding_SceneUnderstandingResult defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        class HL2SUSceneUnderstanding_SceneUnderstandingResult
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneUnderstandingResult();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SUSceneUnderstanding_SceneUnderstandingResult();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneUnderstandingResult(
                    const HL2SUSceneUnderstanding_SceneUnderstandingResult& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneUnderstandingResult(
                    HL2SUSceneUnderstanding_SceneUnderstandingResult&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneUnderstandingResult& operator =(
                    const HL2SUSceneUnderstanding_SceneUnderstandingResult& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SceneUnderstandingResult& operator =(
                    HL2SUSceneUnderstanding_SceneUnderstandingResult&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SUSceneUnderstanding_SceneUnderstandingResult& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SUSceneUnderstanding_SceneUnderstandingResult& x) const;

            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::HL2SUSceneUnderstanding_Status _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_Status status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_Status& status();

            /*!
             * @brief This function copies the value in member extrinsics
             * @param _extrinsics New value to be copied in member extrinsics
             */
            eProsima_user_DllExport void extrinsics(
                    const pcpd_msgs::rpc::float__16& _extrinsics);

            /*!
             * @brief This function moves the value in member extrinsics
             * @param _extrinsics New value to be moved in member extrinsics
             */
            eProsima_user_DllExport void extrinsics(
                    pcpd_msgs::rpc::float__16&& _extrinsics);

            /*!
             * @brief This function returns a constant reference to member extrinsics
             * @return Constant reference to member extrinsics
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::float__16& extrinsics() const;

            /*!
             * @brief This function returns a reference to member extrinsics
             * @return Reference to member extrinsics
             */
            eProsima_user_DllExport pcpd_msgs::rpc::float__16& extrinsics();
            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2SUSceneUnderstanding_Status m_status;
            pcpd_msgs::rpc::float__16 m_extrinsics;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;

        };
        /*!
         * @brief This class represents the structure HL2SUSceneUnderstanding_SpatialQueryResult defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        class HL2SUSceneUnderstanding_SpatialQueryResult
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SpatialQueryResult();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SUSceneUnderstanding_SpatialQueryResult();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SpatialQueryResult(
                    const HL2SUSceneUnderstanding_SpatialQueryResult& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SpatialQueryResult(
                    HL2SUSceneUnderstanding_SpatialQueryResult&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SpatialQueryResult& operator =(
                    const HL2SUSceneUnderstanding_SpatialQueryResult& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult that will be copied.
             */
            eProsima_user_DllExport HL2SUSceneUnderstanding_SpatialQueryResult& operator =(
                    HL2SUSceneUnderstanding_SpatialQueryResult&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SUSceneUnderstanding_SpatialQueryResult& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SUSceneUnderstanding_SpatialQueryResult& x) const;

            /*!
             * @brief This function copies the value in member item_id
             * @param _item_id New value to be copied in member item_id
             */
            eProsima_user_DllExport void item_id(
                    const pcpd_msgs::rpc::HL2Guid& _item_id);

            /*!
             * @brief This function moves the value in member item_id
             * @param _item_id New value to be moved in member item_id
             */
            eProsima_user_DllExport void item_id(
                    pcpd_msgs::rpc::HL2Guid&& _item_id);

            /*!
             * @brief This function returns a constant reference to member item_id
             * @return Constant reference to member item_id
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2Guid& item_id() const;

            /*!
             * @brief This function returns a reference to member item_id
             * @return Reference to member item_id
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2Guid& item_id();
            /*!
             * @brief This function sets a value in member item_kind
             * @param _item_kind New value for member item_kind
             */
            eProsima_user_DllExport void item_kind(
                    pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneObjectKind _item_kind);

            /*!
             * @brief This function returns the value of member item_kind
             * @return Value of member item_kind
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneObjectKind item_kind() const;

            /*!
             * @brief This function returns a reference to member item_kind
             * @return Reference to member item_kind
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneObjectKind& item_kind();

            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();
            /*!
             * @brief This function copies the value in member location_matrix
             * @param _location_matrix New value to be copied in member location_matrix
             */
            eProsima_user_DllExport void location_matrix(
                    const pcpd_msgs::rpc::float__16& _location_matrix);

            /*!
             * @brief This function moves the value in member location_matrix
             * @param _location_matrix New value to be moved in member location_matrix
             */
            eProsima_user_DllExport void location_matrix(
                    pcpd_msgs::rpc::float__16&& _location_matrix);

            /*!
             * @brief This function returns a constant reference to member location_matrix
             * @return Constant reference to member location_matrix
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::float__16& location_matrix() const;

            /*!
             * @brief This function returns a reference to member location_matrix
             * @return Reference to member location_matrix
             */
            eProsima_user_DllExport pcpd_msgs::rpc::float__16& location_matrix();
            /*!
             * @brief This function sets a value in member item_alignment
             * @param _item_alignment New value for member item_alignment
             */
            eProsima_user_DllExport void item_alignment(
                    pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuadAlignment _item_alignment);

            /*!
             * @brief This function returns the value of member item_alignment
             * @return Value of member item_alignment
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuadAlignment item_alignment() const;

            /*!
             * @brief This function returns a reference to member item_alignment
             * @return Reference to member item_alignment
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuadAlignment& item_alignment();

            /*!
             * @brief This function copies the value in member item_extents
             * @param _item_extents New value to be copied in member item_extents
             */
            eProsima_user_DllExport void item_extents(
                    const pcpd_msgs::rpc::float__2& _item_extents);

            /*!
             * @brief This function moves the value in member item_extents
             * @param _item_extents New value to be moved in member item_extents
             */
            eProsima_user_DllExport void item_extents(
                    pcpd_msgs::rpc::float__2&& _item_extents);

            /*!
             * @brief This function returns a constant reference to member item_extents
             * @return Constant reference to member item_extents
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::float__2& item_extents() const;

            /*!
             * @brief This function returns a reference to member item_extents
             * @return Reference to member item_extents
             */
            eProsima_user_DllExport pcpd_msgs::rpc::float__2& item_extents();
            /*!
             * @brief This function copies the value in member meshes
             * @param _meshes New value to be copied in member meshes
             */
            eProsima_user_DllExport void meshes(
                    const std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>& _meshes);

            /*!
             * @brief This function moves the value in member meshes
             * @param _meshes New value to be moved in member meshes
             */
            eProsima_user_DllExport void meshes(
                    std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>&& _meshes);

            /*!
             * @brief This function returns a constant reference to member meshes
             * @return Constant reference to member meshes
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>& meshes() const;

            /*!
             * @brief This function returns a reference to member meshes
             * @return Reference to member meshes
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>& meshes();
            /*!
             * @brief This function copies the value in member collider_meshes
             * @param _collider_meshes New value to be copied in member collider_meshes
             */
            eProsima_user_DllExport void collider_meshes(
                    const std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>& _collider_meshes);

            /*!
             * @brief This function moves the value in member collider_meshes
             * @param _collider_meshes New value to be moved in member collider_meshes
             */
            eProsima_user_DllExport void collider_meshes(
                    std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>&& _collider_meshes);

            /*!
             * @brief This function returns a constant reference to member collider_meshes
             * @return Constant reference to member collider_meshes
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>& collider_meshes() const;

            /*!
             * @brief This function returns a reference to member collider_meshes
             * @return Reference to member collider_meshes
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh>& collider_meshes();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2Guid m_item_id;
            pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneObjectKind m_item_kind;
            geometry_msgs::msg::Vector3 m_position;
            geometry_msgs::msg::Quaternion m_orientation;
            pcpd_msgs::rpc::float__16 m_location_matrix;
            pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuadAlignment m_item_alignment;
            pcpd_msgs::rpc::float__2 m_item_extents;
            std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh> m_meshes;
            std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_Mesh> m_collider_meshes;

        };
        /*!
         * @brief This class represents the structure HL2SURequest_SpatialQuery defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        class HL2SURequest_SpatialQuery
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SURequest_SpatialQuery();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SURequest_SpatialQuery();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SURequest_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SURequest_SpatialQuery(
                    const HL2SURequest_SpatialQuery& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SURequest_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SURequest_SpatialQuery(
                    HL2SURequest_SpatialQuery&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SURequest_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SURequest_SpatialQuery& operator =(
                    const HL2SURequest_SpatialQuery& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SURequest_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SURequest_SpatialQuery& operator =(
                    HL2SURequest_SpatialQuery&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SURequest_SpatialQuery object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SURequest_SpatialQuery& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SURequest_SpatialQuery object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SURequest_SpatialQuery& x) const;

            /*!
             * @brief This function copies the value in member sqs
             * @param _sqs New value to be copied in member sqs
             */
            eProsima_user_DllExport void sqs(
                    const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings& _sqs);

            /*!
             * @brief This function moves the value in member sqs
             * @param _sqs New value to be moved in member sqs
             */
            eProsima_user_DllExport void sqs(
                    pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings&& _sqs);

            /*!
             * @brief This function returns a constant reference to member sqs
             * @return Constant reference to member sqs
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings& sqs() const;

            /*!
             * @brief This function returns a reference to member sqs
             * @return Reference to member sqs
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings& sqs();
            /*!
             * @brief This function sets a value in member query_radius
             * @param _query_radius New value for member query_radius
             */
            eProsima_user_DllExport void query_radius(
                    float _query_radius);

            /*!
             * @brief This function returns the value of member query_radius
             * @return Value of member query_radius
             */
            eProsima_user_DllExport float query_radius() const;

            /*!
             * @brief This function returns a reference to member query_radius
             * @return Reference to member query_radius
             */
            eProsima_user_DllExport float& query_radius();

            /*!
             * @brief This function sets a value in member use_previous
             * @param _use_previous New value for member use_previous
             */
            eProsima_user_DllExport void use_previous(
                    bool _use_previous);

            /*!
             * @brief This function returns the value of member use_previous
             * @return Value of member use_previous
             */
            eProsima_user_DllExport bool use_previous() const;

            /*!
             * @brief This function returns a reference to member use_previous
             * @return Reference to member use_previous
             */
            eProsima_user_DllExport bool& use_previous();

            /*!
             * @brief This function sets a value in member kind_flags
             * @param _kind_flags New value for member kind_flags
             */
            eProsima_user_DllExport void kind_flags(
                    uint8_t _kind_flags);

            /*!
             * @brief This function returns the value of member kind_flags
             * @return Value of member kind_flags
             */
            eProsima_user_DllExport uint8_t kind_flags() const;

            /*!
             * @brief This function returns a reference to member kind_flags
             * @return Reference to member kind_flags
             */
            eProsima_user_DllExport uint8_t& kind_flags();

            /*!
             * @brief This function sets a value in member get_orientation
             * @param _get_orientation New value for member get_orientation
             */
            eProsima_user_DllExport void get_orientation(
                    bool _get_orientation);

            /*!
             * @brief This function returns the value of member get_orientation
             * @return Value of member get_orientation
             */
            eProsima_user_DllExport bool get_orientation() const;

            /*!
             * @brief This function returns a reference to member get_orientation
             * @return Reference to member get_orientation
             */
            eProsima_user_DllExport bool& get_orientation();

            /*!
             * @brief This function sets a value in member get_position
             * @param _get_position New value for member get_position
             */
            eProsima_user_DllExport void get_position(
                    bool _get_position);

            /*!
             * @brief This function returns the value of member get_position
             * @return Value of member get_position
             */
            eProsima_user_DllExport bool get_position() const;

            /*!
             * @brief This function returns a reference to member get_position
             * @return Reference to member get_position
             */
            eProsima_user_DllExport bool& get_position();

            /*!
             * @brief This function sets a value in member get_location_matrix
             * @param _get_location_matrix New value for member get_location_matrix
             */
            eProsima_user_DllExport void get_location_matrix(
                    bool _get_location_matrix);

            /*!
             * @brief This function returns the value of member get_location_matrix
             * @return Value of member get_location_matrix
             */
            eProsima_user_DllExport bool get_location_matrix() const;

            /*!
             * @brief This function returns a reference to member get_location_matrix
             * @return Reference to member get_location_matrix
             */
            eProsima_user_DllExport bool& get_location_matrix();

            /*!
             * @brief This function sets a value in member get_quad
             * @param _get_quad New value for member get_quad
             */
            eProsima_user_DllExport void get_quad(
                    bool _get_quad);

            /*!
             * @brief This function returns the value of member get_quad
             * @return Value of member get_quad
             */
            eProsima_user_DllExport bool get_quad() const;

            /*!
             * @brief This function returns a reference to member get_quad
             * @return Reference to member get_quad
             */
            eProsima_user_DllExport bool& get_quad();

            /*!
             * @brief This function sets a value in member get_meshes
             * @param _get_meshes New value for member get_meshes
             */
            eProsima_user_DllExport void get_meshes(
                    bool _get_meshes);

            /*!
             * @brief This function returns the value of member get_meshes
             * @return Value of member get_meshes
             */
            eProsima_user_DllExport bool get_meshes() const;

            /*!
             * @brief This function returns a reference to member get_meshes
             * @return Reference to member get_meshes
             */
            eProsima_user_DllExport bool& get_meshes();

            /*!
             * @brief This function sets a value in member get_collider_meshes
             * @param _get_collider_meshes New value for member get_collider_meshes
             */
            eProsima_user_DllExport void get_collider_meshes(
                    bool _get_collider_meshes);

            /*!
             * @brief This function returns the value of member get_collider_meshes
             * @return Value of member get_collider_meshes
             */
            eProsima_user_DllExport bool get_collider_meshes() const;

            /*!
             * @brief This function returns a reference to member get_collider_meshes
             * @return Reference to member get_collider_meshes
             */
            eProsima_user_DllExport bool& get_collider_meshes();

            /*!
             * @brief This function copies the value in member guids
             * @param _guids New value to be copied in member guids
             */
            eProsima_user_DllExport void guids(
                    const std::vector<pcpd_msgs::rpc::HL2Guid>& _guids);

            /*!
             * @brief This function moves the value in member guids
             * @param _guids New value to be moved in member guids
             */
            eProsima_user_DllExport void guids(
                    std::vector<pcpd_msgs::rpc::HL2Guid>&& _guids);

            /*!
             * @brief This function returns a constant reference to member guids
             * @return Constant reference to member guids
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2Guid>& guids() const;

            /*!
             * @brief This function returns a reference to member guids
             * @return Reference to member guids
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2Guid>& guids();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SURequest_SpatialQuery& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneQuerySettings m_sqs;
            float m_query_radius;
            bool m_use_previous;
            uint8_t m_kind_flags;
            bool m_get_orientation;
            bool m_get_position;
            bool m_get_location_matrix;
            bool m_get_quad;
            bool m_get_meshes;
            bool m_get_collider_meshes;
            std::vector<pcpd_msgs::rpc::HL2Guid> m_guids;

        };
        /*!
         * @brief This class represents the structure HL2SUResponse_SpatialQuery defined by the user in the IDL file.
         * @ingroup HOLOLENS2SCENEUNDERSTANDING
         */
        class HL2SUResponse_SpatialQuery
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HL2SUResponse_SpatialQuery();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HL2SUResponse_SpatialQuery();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUResponse_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SUResponse_SpatialQuery(
                    const HL2SUResponse_SpatialQuery& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUResponse_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SUResponse_SpatialQuery(
                    HL2SUResponse_SpatialQuery&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUResponse_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SUResponse_SpatialQuery& operator =(
                    const HL2SUResponse_SpatialQuery& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object pcpd_msgs::rpc::HL2SUResponse_SpatialQuery that will be copied.
             */
            eProsima_user_DllExport HL2SUResponse_SpatialQuery& operator =(
                    HL2SUResponse_SpatialQuery&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUResponse_SpatialQuery object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const HL2SUResponse_SpatialQuery& x) const;

            /*!
             * @brief Comparison operator.
             * @param x pcpd_msgs::rpc::HL2SUResponse_SpatialQuery object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const HL2SUResponse_SpatialQuery& x) const;

            /*!
             * @brief This function copies the value in member result
             * @param _result New value to be copied in member result
             */
            eProsima_user_DllExport void result(
                    const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult& _result);

            /*!
             * @brief This function moves the value in member result
             * @param _result New value to be moved in member result
             */
            eProsima_user_DllExport void result(
                    pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult&& _result);

            /*!
             * @brief This function returns a constant reference to member result
             * @return Constant reference to member result
             */
            eProsima_user_DllExport const pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult& result() const;

            /*!
             * @brief This function returns a reference to member result
             * @return Reference to member result
             */
            eProsima_user_DllExport pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult& result();
            /*!
             * @brief This function copies the value in member items
             * @param _items New value to be copied in member items
             */
            eProsima_user_DllExport void items(
                    const std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult>& _items);

            /*!
             * @brief This function moves the value in member items
             * @param _items New value to be moved in member items
             */
            eProsima_user_DllExport void items(
                    std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult>&& _items);

            /*!
             * @brief This function returns a constant reference to member items
             * @return Constant reference to member items
             */
            eProsima_user_DllExport const std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult>& items() const;

            /*!
             * @brief This function returns a reference to member items
             * @return Reference to member items
             */
            eProsima_user_DllExport std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult>& items();
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            eProsima_user_DllExport void status(
                    pcpd_msgs::rpc::RPCResponseStatus _status);

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus status() const;

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            eProsima_user_DllExport pcpd_msgs::rpc::RPCResponseStatus& status();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const pcpd_msgs::rpc::HL2SUResponse_SpatialQuery& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            pcpd_msgs::rpc::HL2SUSceneUnderstanding_SceneUnderstandingResult m_result;
            std::vector<pcpd_msgs::rpc::HL2SUSceneUnderstanding_SpatialQueryResult> m_items;
            pcpd_msgs::rpc::RPCResponseStatus m_status;

        };
    } // namespace rpc
} // namespace pcpd_msgs

#endif // _FAST_DDS_GENERATED_PCPD_MSGS_RPC_HOLOLENS2SCENEUNDERSTANDING_H_