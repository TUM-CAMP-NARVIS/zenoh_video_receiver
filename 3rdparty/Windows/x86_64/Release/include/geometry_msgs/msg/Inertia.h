// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Inertia.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_INERTIA_H_
#define _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_INERTIA_H_

#include "geometry_msgs/msg/Vector3.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Inertia_SOURCE)
#define Inertia_DllAPI __declspec( dllexport )
#else
#define Inertia_DllAPI __declspec( dllimport )
#endif // Inertia_SOURCE
#else
#define Inertia_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Inertia_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace geometry_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Inertia defined by the user in the IDL file.
         * @ingroup INERTIA
         */
        class Inertia
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Inertia();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Inertia();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
             */
            eProsima_user_DllExport Inertia(
                    const Inertia& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
             */
            eProsima_user_DllExport Inertia(
                    Inertia&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
             */
            eProsima_user_DllExport Inertia& operator =(
                    const Inertia& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
             */
            eProsima_user_DllExport Inertia& operator =(
                    Inertia&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x geometry_msgs::msg::Inertia object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Inertia& x) const;

            /*!
             * @brief Comparison operator.
             * @param x geometry_msgs::msg::Inertia object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Inertia& x) const;

            /*!
             * @brief This function sets a value in member m
             * @param _m New value for member m
             */
            eProsima_user_DllExport void m(
                    double _m);

            /*!
             * @brief This function returns the value of member m
             * @return Value of member m
             */
            eProsima_user_DllExport double m() const;

            /*!
             * @brief This function returns a reference to member m
             * @return Reference to member m
             */
            eProsima_user_DllExport double& m();

            /*!
             * @brief This function copies the value in member com
             * @param _com New value to be copied in member com
             */
            eProsima_user_DllExport void com(
                    const geometry_msgs::msg::Vector3& _com);

            /*!
             * @brief This function moves the value in member com
             * @param _com New value to be moved in member com
             */
            eProsima_user_DllExport void com(
                    geometry_msgs::msg::Vector3&& _com);

            /*!
             * @brief This function returns a constant reference to member com
             * @return Constant reference to member com
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& com() const;

            /*!
             * @brief This function returns a reference to member com
             * @return Reference to member com
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& com();
            /*!
             * @brief This function sets a value in member ixx
             * @param _ixx New value for member ixx
             */
            eProsima_user_DllExport void ixx(
                    double _ixx);

            /*!
             * @brief This function returns the value of member ixx
             * @return Value of member ixx
             */
            eProsima_user_DllExport double ixx() const;

            /*!
             * @brief This function returns a reference to member ixx
             * @return Reference to member ixx
             */
            eProsima_user_DllExport double& ixx();

            /*!
             * @brief This function sets a value in member ixy
             * @param _ixy New value for member ixy
             */
            eProsima_user_DllExport void ixy(
                    double _ixy);

            /*!
             * @brief This function returns the value of member ixy
             * @return Value of member ixy
             */
            eProsima_user_DllExport double ixy() const;

            /*!
             * @brief This function returns a reference to member ixy
             * @return Reference to member ixy
             */
            eProsima_user_DllExport double& ixy();

            /*!
             * @brief This function sets a value in member ixz
             * @param _ixz New value for member ixz
             */
            eProsima_user_DllExport void ixz(
                    double _ixz);

            /*!
             * @brief This function returns the value of member ixz
             * @return Value of member ixz
             */
            eProsima_user_DllExport double ixz() const;

            /*!
             * @brief This function returns a reference to member ixz
             * @return Reference to member ixz
             */
            eProsima_user_DllExport double& ixz();

            /*!
             * @brief This function sets a value in member iyy
             * @param _iyy New value for member iyy
             */
            eProsima_user_DllExport void iyy(
                    double _iyy);

            /*!
             * @brief This function returns the value of member iyy
             * @return Value of member iyy
             */
            eProsima_user_DllExport double iyy() const;

            /*!
             * @brief This function returns a reference to member iyy
             * @return Reference to member iyy
             */
            eProsima_user_DllExport double& iyy();

            /*!
             * @brief This function sets a value in member iyz
             * @param _iyz New value for member iyz
             */
            eProsima_user_DllExport void iyz(
                    double _iyz);

            /*!
             * @brief This function returns the value of member iyz
             * @return Value of member iyz
             */
            eProsima_user_DllExport double iyz() const;

            /*!
             * @brief This function returns a reference to member iyz
             * @return Reference to member iyz
             */
            eProsima_user_DllExport double& iyz();

            /*!
             * @brief This function sets a value in member izz
             * @param _izz New value for member izz
             */
            eProsima_user_DllExport void izz(
                    double _izz);

            /*!
             * @brief This function returns the value of member izz
             * @return Value of member izz
             */
            eProsima_user_DllExport double izz() const;

            /*!
             * @brief This function returns a reference to member izz
             * @return Reference to member izz
             */
            eProsima_user_DllExport double& izz();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::Inertia& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_m;
            geometry_msgs::msg::Vector3 m_com;
            double m_ixx;
            double m_ixy;
            double m_ixz;
            double m_iyy;
            double m_iyz;
            double m_izz;

        };
    } // namespace msg
} // namespace geometry_msgs

#endif // _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_INERTIA_H_